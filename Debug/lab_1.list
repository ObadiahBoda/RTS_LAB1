
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003724  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e8  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  200000e8  08003af0  000200e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000046c  08003af0  0002046c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000125f7  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cf3  00000000  00000000  0003270f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008089  00000000  00000000  00035402  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ba0  00000000  00000000  0003d490  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e90  00000000  00000000  0003e030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022e22  00000000  00000000  0003eec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b52a  00000000  00000000  00061ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d4429  00000000  00000000  0006d20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00141635  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b70  00000000  00000000  001416b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  00144220  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  001442bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080038dc 	.word	0x080038dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	080038dc 	.word	0x080038dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <sch_power_up>:

/**
  * sch_power_up () - power up (tasks/system) SCHEDULING module
  */
void sch_power_up ( void )
{
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	2300      	movs	r3, #0
	uint8_t i;
	//sch_timeout_ticks[MAX_TIMEOUTS];
	for(i=0; i< MAX_TIMEOUTS; i++)
	{
		sch_timeout_state[i] = SCH_STATE_IDLE;
 80005c4:	f8df e074 	ldr.w	lr, [pc, #116]	; 800063c <sch_power_up+0x7c>
		sch_timeout_order[i] = (i+1)%MAX_TIMEOUTS;
 80005c8:	4c14      	ldr	r4, [pc, #80]	; (800061c <sch_power_up+0x5c>)
		sch_callback_funcs[i] = (sch_cb_func_t)NULL; //sch_default_callback;
 80005ca:	f8df c074 	ldr.w	ip, [pc, #116]	; 8000640 <sch_power_up+0x80>
		sch_callback_name[i] = str_NONE;
 80005ce:	4e14      	ldr	r6, [pc, #80]	; (8000620 <sch_power_up+0x60>)
 80005d0:	4f14      	ldr	r7, [pc, #80]	; (8000624 <sch_power_up+0x64>)
		sch_timeout_state[i] = SCH_STATE_IDLE;
 80005d2:	461a      	mov	r2, r3
		sch_timeout_order[i] = (i+1)%MAX_TIMEOUTS;
 80005d4:	251e      	movs	r5, #30
 80005d6:	1c59      	adds	r1, r3, #1
	for(i=0; i< MAX_TIMEOUTS; i++)
 80005d8:	291e      	cmp	r1, #30
		sch_timeout_order[i] = (i+1)%MAX_TIMEOUTS;
 80005da:	fb91 f0f5 	sdiv	r0, r1, r5
 80005de:	fb05 1010 	mls	r0, r5, r0, r1
		sch_timeout_state[i] = SCH_STATE_IDLE;
 80005e2:	f803 200e 	strb.w	r2, [r3, lr]
		sch_timeout_order[i] = (i+1)%MAX_TIMEOUTS;
 80005e6:	5518      	strb	r0, [r3, r4]
		sch_callback_funcs[i] = (sch_cb_func_t)NULL; //sch_default_callback;
 80005e8:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		sch_callback_name[i] = str_NONE;
 80005ec:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
 80005f0:	460b      	mov	r3, r1
	for(i=0; i< MAX_TIMEOUTS; i++)
 80005f2:	d1f0      	bne.n	80005d6 <sch_power_up+0x16>
	}
	sch_timeout_order[MAX_TIMEOUTS - 1] = SCH_NO_TIMEOUT_ID; // last points to nothing
	sch_timeout_count = MAX_TIMEOUTS; // initially all empty
	sch_tout_head = SCH_NO_TIMEOUT_ID; // empty
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <sch_power_up+0x68>)



	for(i=0; i< MAX_LOOPS; i++)
	{
		sch_loop_funcs[i] = SCH_NO_FUNC_ID;
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <sch_power_up+0x6c>)
	sch_timeout_order[MAX_TIMEOUTS - 1] = SCH_NO_TIMEOUT_ID; // last points to nothing
 80005f8:	23ff      	movs	r3, #255	; 0xff
	sch_tout_head = SCH_NO_TIMEOUT_ID; // empty
 80005fa:	700b      	strb	r3, [r1, #0]
	sch_timeout_order[MAX_TIMEOUTS - 1] = SCH_NO_TIMEOUT_ID; // last points to nothing
 80005fc:	7763      	strb	r3, [r4, #29]
	sch_tout_free = 0; // first empty ID
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <sch_power_up+0x70>)
		sch_loop_funcs_on[i] = SCH_FUNC_OFF;
 8000600:	490c      	ldr	r1, [pc, #48]	; (8000634 <sch_power_up+0x74>)
	sch_tout_free = 0; // first empty ID
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	2300      	movs	r3, #0
		sch_loop_funcs[i] = SCH_NO_FUNC_ID;
 8000606:	461a      	mov	r2, r3
 8000608:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		sch_loop_funcs_on[i] = SCH_FUNC_OFF;
 800060c:	545a      	strb	r2, [r3, r1]
 800060e:	3301      	adds	r3, #1
	for(i=0; i< MAX_LOOPS; i++)
 8000610:	2b0a      	cmp	r3, #10
 8000612:	d1f9      	bne.n	8000608 <sch_power_up+0x48>
	}
	sch_timeout_count = 0; // empty
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <sch_power_up+0x78>)
 8000616:	701a      	strb	r2, [r3, #0]

}
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	bf00      	nop
 800061c:	200002d0 	.word	0x200002d0
 8000620:	200002f0 	.word	0x200002f0
 8000624:	20000000 	.word	0x20000000
 8000628:	200001d1 	.word	0x200001d1
 800062c:	20000110 	.word	0x20000110
 8000630:	200001b0 	.word	0x200001b0
 8000634:	2000024c 	.word	0x2000024c
 8000638:	200001b1 	.word	0x200001b1
 800063c:	200001b2 	.word	0x200001b2
 8000640:	200001d4 	.word	0x200001d4

08000644 <sch_init>:
  */
void sch_init ( void )
{
	// Any initializations - e.g. periodic scheduler job/task

}
 8000644:	4770      	bx	lr
	...

08000648 <sch_loop>:

/**
  * sch_loop() - executes main loop block (BUT DOES NOT LOOP ITSELF!!!)
  */
void sch_loop( void )
{
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);// Pin PC8=0 et the end of each loop iteration
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // Pin PC6=1 after FOR loop ends
*/
	while ( (SCH_NO_TIMEOUT_ID != sch_tout_head )
 800064a:	4c13      	ldr	r4, [pc, #76]	; (8000698 <sch_loop+0x50>)
		&& (sch_timeout_ticks[sch_tout_head ] < rtc_get_ticks()) )
 800064c:	4e13      	ldr	r6, [pc, #76]	; (800069c <sch_loop+0x54>)
		//sprintf(temp_str, "D=%d,exp=%lu,t4=%lu,t=%lu,sys=%lu\n", diff, expected, t4_diff, sch_timeout_ticks[sch_tout_head], rtc_get_ticks());
		sprintf(temp_str, "D=%d us\n", diff);
		HAL_UART_Transmit(&huart2, (uint8_t*)temp_str, strlen((char*)temp_str),30);
#endif // report delay for TIMEOUT execution
		// Remove from head for the purpose of consistency
		ATOMIC(
 800064e:	4d14      	ldr	r5, [pc, #80]	; (80006a0 <sch_loop+0x58>)
	while ( (SCH_NO_TIMEOUT_ID != sch_tout_head )
 8000650:	7823      	ldrb	r3, [r4, #0]
 8000652:	2bff      	cmp	r3, #255	; 0xff
 8000654:	d005      	beq.n	8000662 <sch_loop+0x1a>
		&& (sch_timeout_ticks[sch_tout_head ] < rtc_get_ticks()) )
 8000656:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 800065a:	f000 f8fb 	bl	8000854 <HAL_GetTick>
 800065e:	4287      	cmp	r7, r0
 8000660:	d300      	bcc.n	8000664 <sch_loop+0x1c>
		// Execute
		(sch_callback_funcs[timeout_idx ])(sch_callback_context[timeout_idx] );
		// Free the Timer slot for others to use
		sch_timeout_state[timeout_idx] = SCH_STATE_IDLE;
	}
}
 8000662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
		ATOMIC(
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <sch_loop+0x5c>)
 8000668:	7823      	ldrb	r3, [r4, #0]
 800066a:	702b      	strb	r3, [r5, #0]
 800066c:	5cd1      	ldrb	r1, [r2, r3]
 800066e:	7021      	strb	r1, [r4, #0]
 8000670:	21ee      	movs	r1, #238	; 0xee
 8000672:	54d1      	strb	r1, [r2, r3]
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <sch_loop+0x60>)
 8000676:	7813      	ldrb	r3, [r2, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800067c:	b662      	cpsie	i
		(sch_callback_funcs[timeout_idx ])(sch_callback_context[timeout_idx] );
 800067e:	490b      	ldr	r1, [pc, #44]	; (80006ac <sch_loop+0x64>)
 8000680:	782b      	ldrb	r3, [r5, #0]
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <sch_loop+0x68>)
 8000684:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000688:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068c:	4790      	blx	r2
		sch_timeout_state[timeout_idx] = SCH_STATE_IDLE;
 800068e:	782b      	ldrb	r3, [r5, #0]
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <sch_loop+0x6c>)
 8000692:	2100      	movs	r1, #0
 8000694:	54d1      	strb	r1, [r2, r3]
 8000696:	e7db      	b.n	8000650 <sch_loop+0x8>
 8000698:	200001d1 	.word	0x200001d1
 800069c:	20000138 	.word	0x20000138
 80006a0:	200001d0 	.word	0x200001d0
 80006a4:	200002d0 	.word	0x200002d0
 80006a8:	200001b1 	.word	0x200001b1
 80006ac:	20000258 	.word	0x20000258
 80006b0:	200001d4 	.word	0x200001d4
 80006b4:	200001b2 	.word	0x200001b2

080006b8 <sch_add_loop>:
  * sch_add_loop( sch_loop_func_t loop_func) - sets a new loop function to
  *		be executed every time in the main loop
  *	RETURNS: loop function ID or "SCH_NO_FUNC_ID" if unsuccesful
  */
uint8_t sch_add_loop( sch_loop_func_t loop_func)
{
 80006b8:	b510      	push	{r4, lr}
	uint8_t i = SCH_NO_TIMEOUT_ID;
	for( i= 0; i < MAX_LOOPS; i++)
	{
		if (sch_loop_funcs_on[i] == SCH_FUNC_OFF)
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <sch_add_loop+0x24>)
{
 80006bc:	2300      	movs	r3, #0
		if (sch_loop_funcs_on[i] == SCH_FUNC_OFF)
 80006be:	5c5c      	ldrb	r4, [r3, r1]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	b12c      	cbz	r4, 80006d0 <sch_add_loop+0x18>
 80006c4:	3301      	adds	r3, #1
	for( i= 0; i < MAX_LOOPS; i++)
 80006c6:	2b0a      	cmp	r3, #10
 80006c8:	d1f9      	bne.n	80006be <sch_add_loop+0x6>
		sch_loop_funcs[i] = loop_func;
		sch_loop_funcs_on[i] = SCH_FUNC_ON;
		return i;
	}
	// else not found free space
	return 	SCH_NO_TIMEOUT_ID;
 80006ca:	22ff      	movs	r2, #255	; 0xff
}
 80006cc:	4610      	mov	r0, r2
 80006ce:	bd10      	pop	{r4, pc}
		sch_loop_funcs[i] = loop_func;
 80006d0:	4c03      	ldr	r4, [pc, #12]	; (80006e0 <sch_add_loop+0x28>)
 80006d2:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
		sch_loop_funcs_on[i] = SCH_FUNC_ON;
 80006d6:	2001      	movs	r0, #1
 80006d8:	54c8      	strb	r0, [r1, r3]
		return i;
 80006da:	e7f7      	b.n	80006cc <sch_add_loop+0x14>
 80006dc:	2000024c 	.word	0x2000024c
 80006e0:	20000110 	.word	0x20000110

080006e4 <get_free_timeout>:
list_index_t get_free_timeout()
{
	list_index_t i;
	for(i=0; i < MAX_TIMEOUTS; i++)
	{
		if ( SCH_STATE_IDLE == sch_timeout_state[i] )
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <get_free_timeout+0x28>)
{
 80006e6:	b508      	push	{r3, lr}
 80006e8:	2300      	movs	r3, #0
		if ( SCH_STATE_IDLE == sch_timeout_state[i] )
 80006ea:	5c99      	ldrb	r1, [r3, r2]
 80006ec:	b2d8      	uxtb	r0, r3
 80006ee:	b911      	cbnz	r1, 80006f6 <get_free_timeout+0x12>
		{
			sch_timeout_state[i]= SCH_STATE_BUSY;
 80006f0:	2103      	movs	r1, #3
 80006f2:	54d1      	strb	r1, [r2, r3]
			return i;
		}
	}
	printf("NO TIMEOUTS LEFT = %d\n", sch_timeout_count);
	return SCH_NO_TIMEOUT_ID;
}
 80006f4:	bd08      	pop	{r3, pc}
 80006f6:	3301      	adds	r3, #1
	for(i=0; i < MAX_TIMEOUTS; i++)
 80006f8:	2b1e      	cmp	r3, #30
 80006fa:	d1f6      	bne.n	80006ea <get_free_timeout+0x6>
	printf("NO TIMEOUTS LEFT = %d\n", sch_timeout_count);
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <get_free_timeout+0x2c>)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <get_free_timeout+0x30>)
 8000700:	7819      	ldrb	r1, [r3, #0]
 8000702:	f002 f805 	bl	8002710 <iprintf>
 8000706:	20ff      	movs	r0, #255	; 0xff
 8000708:	e7f4      	b.n	80006f4 <get_free_timeout+0x10>
 800070a:	bf00      	nop
 800070c:	200001b2 	.word	0x200001b2
 8000710:	200001b1 	.word	0x200001b1
 8000714:	080038f4 	.word	0x080038f4

08000718 <sch_create_timeout>:
{
 8000718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	list_index_t order_idx = sch_tout_head;
 800071c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80007bc <sch_create_timeout+0xa4>
{
 8000720:	461f      	mov	r7, r3
 8000722:	4689      	mov	r9, r1
 8000724:	4690      	mov	r8, r2
 8000726:	4606      	mov	r6, r0
	list_index_t order_idx = sch_tout_head;
 8000728:	f89a 5000 	ldrb.w	r5, [sl]
	tidx = get_free_timeout();
 800072c:	f7ff ffda 	bl	80006e4 <get_free_timeout>
	printf("SCH_TO_SET= %d,%s #\n", tidx, name);
 8000730:	463a      	mov	r2, r7
	tidx = get_free_timeout();
 8000732:	4604      	mov	r4, r0
	printf("SCH_TO_SET= %d,%s #\n", tidx, name);
 8000734:	4601      	mov	r1, r0
 8000736:	4819      	ldr	r0, [pc, #100]	; (800079c <sch_create_timeout+0x84>)
 8000738:	f001 ffea 	bl	8002710 <iprintf>
	if (SCH_NO_TIMEOUT_ID == tidx)
 800073c:	2cff      	cmp	r4, #255	; 0xff
 800073e:	d01e      	beq.n	800077e <sch_create_timeout+0x66>
	sch_timeout_count++;
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <sch_create_timeout+0x88>)
 8000742:	7813      	ldrb	r3, [r2, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	7013      	strb	r3, [r2, #0]
	sch_timeout_state[tidx] = SCH_STATE_PENDING;
 8000748:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <sch_create_timeout+0x8c>)
	sch_timeout_ticks[tidx] = timeout;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <sch_create_timeout+0x90>)
	sch_timeout_state[tidx] = SCH_STATE_PENDING;
 800074c:	2101      	movs	r1, #1
 800074e:	5511      	strb	r1, [r2, r4]
	sch_callback_funcs[tidx] = callback_func;
 8000750:	4a16      	ldr	r2, [pc, #88]	; (80007ac <sch_create_timeout+0x94>)
	if ((SCH_NO_TIMEOUT_ID == sch_tout_head) || (timeout < sch_timeout_ticks[sch_tout_head]))
 8000752:	f89a 1000 	ldrb.w	r1, [sl]
	sch_callback_funcs[tidx] = callback_func;
 8000756:	f842 9024 	str.w	r9, [r2, r4, lsl #2]
	sch_callback_context[tidx] = t_context;
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <sch_create_timeout+0x98>)
	sch_timeout_ticks[tidx] = timeout;
 800075c:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
	sch_callback_context[tidx] = t_context;
 8000760:	f842 8024 	str.w	r8, [r2, r4, lsl #2]
	sch_callback_name[tidx] = name;
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <sch_create_timeout+0x9c>)
	if ((SCH_NO_TIMEOUT_ID == sch_tout_head) || (timeout < sch_timeout_ticks[sch_tout_head]))
 8000766:	29ff      	cmp	r1, #255	; 0xff
	sch_callback_name[tidx] = name;
 8000768:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <sch_create_timeout+0xa0>)
	if ((SCH_NO_TIMEOUT_ID == sch_tout_head) || (timeout < sch_timeout_ticks[sch_tout_head]))
 800076e:	d003      	beq.n	8000778 <sch_create_timeout+0x60>
 8000770:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8000774:	42b0      	cmp	r0, r6
 8000776:	d905      	bls.n	8000784 <sch_create_timeout+0x6c>
		sch_timeout_order[tidx] = sch_tout_head; // put as first
 8000778:	5511      	strb	r1, [r2, r4]
		sch_tout_head = tidx;
 800077a:	f88a 4000 	strb.w	r4, [sl]
}
 800077e:	4620      	mov	r0, r4
 8000780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while ((SCH_NO_TIMEOUT_ID != sch_timeout_order[order_idx])
 8000784:	4629      	mov	r1, r5
 8000786:	5d55      	ldrb	r5, [r2, r5]
 8000788:	2dff      	cmp	r5, #255	; 0xff
 800078a:	d003      	beq.n	8000794 <sch_create_timeout+0x7c>
			   && (timeout > sch_timeout_ticks[sch_timeout_order[order_idx]]))
 800078c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000790:	42b0      	cmp	r0, r6
 8000792:	d3f7      	bcc.n	8000784 <sch_create_timeout+0x6c>
		sch_timeout_order[tidx] = sch_timeout_order[order_idx]; // inherit the next in list
 8000794:	5515      	strb	r5, [r2, r4]
		sch_timeout_order[order_idx] = tidx; // connect to the previous item (earlier event)
 8000796:	5454      	strb	r4, [r2, r1]
 8000798:	e7f1      	b.n	800077e <sch_create_timeout+0x66>
 800079a:	bf00      	nop
 800079c:	0800390b 	.word	0x0800390b
 80007a0:	200001b1 	.word	0x200001b1
 80007a4:	200001b2 	.word	0x200001b2
 80007a8:	20000138 	.word	0x20000138
 80007ac:	200001d4 	.word	0x200001d4
 80007b0:	20000258 	.word	0x20000258
 80007b4:	200002f0 	.word	0x200002f0
 80007b8:	200002d0 	.word	0x200002d0
 80007bc:	200001d1 	.word	0x200001d1

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_InitTick+0x3c>)
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_InitTick+0x40>)
{
 80007c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	7818      	ldrb	r0, [r3, #0]
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80007d2:	6810      	ldr	r0, [r2, #0]
 80007d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007d8:	f000 fb42 	bl	8000e60 <HAL_SYSTICK_Config>
 80007dc:	4604      	mov	r4, r0
 80007de:	b958      	cbnz	r0, 80007f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e0:	2d0f      	cmp	r5, #15
 80007e2:	d809      	bhi.n	80007f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	4602      	mov	r2, r0
 80007e6:	4629      	mov	r1, r5
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 faf6 	bl	8000ddc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <HAL_InitTick+0x44>)
 80007f2:	4620      	mov	r0, r4
 80007f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80007f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80007f8:	2001      	movs	r0, #1
 80007fa:	e7fc      	b.n	80007f6 <HAL_InitTick+0x36>
 80007fc:	20000010 	.word	0x20000010
 8000800:	20000005 	.word	0x20000005
 8000804:	20000008 	.word	0x20000008

08000808 <HAL_Init>:
{
 8000808:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_Init+0x30>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000812:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800081a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000822:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 fac7 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff ffc8 	bl	80007c0 <HAL_InitTick>
  HAL_MspInit();
 8000830:	f001 fd30 	bl	8002294 <HAL_MspInit>
}
 8000834:	2000      	movs	r0, #0
 8000836:	bd08      	pop	{r3, pc}
 8000838:	40023c00 	.word	0x40023c00

0800083c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x10>)
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <HAL_IncTick+0x14>)
 8000840:	6811      	ldr	r1, [r2, #0]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	440b      	add	r3, r1
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000368 	.word	0x20000368
 8000850:	20000005 	.word	0x20000005

08000854 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000854:	4b01      	ldr	r3, [pc, #4]	; (800085c <HAL_GetTick+0x8>)
 8000856:	6818      	ldr	r0, [r3, #0]
}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000368 	.word	0x20000368

08000860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000860:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000862:	4604      	mov	r4, r0
 8000864:	2800      	cmp	r0, #0
 8000866:	f000 809b 	beq.w	80009a0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800086a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800086c:	b925      	cbnz	r5, 8000878 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800086e:	f001 fd2f 	bl	80022d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000872:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000874:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800087a:	06db      	lsls	r3, r3, #27
 800087c:	f100 808e 	bmi.w	800099c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000882:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000886:	f023 0302 	bic.w	r3, r3, #2
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000890:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <HAL_ADC_Init+0x144>)
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000898:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	6861      	ldr	r1, [r4, #4]
 800089e:	430a      	orrs	r2, r1
 80008a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008a2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008a4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80008b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008b6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008b8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008ba:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008be:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80008c6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80008c8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80008ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	430a      	orrs	r2, r1
 80008d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008d6:	4934      	ldr	r1, [pc, #208]	; (80009a8 <HAL_ADC_Init+0x148>)
 80008d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80008da:	428a      	cmp	r2, r1
 80008dc:	d052      	beq.n	8000984 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80008de:	6899      	ldr	r1, [r3, #8]
 80008e0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80008e4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80008e6:	6899      	ldr	r1, [r3, #8]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80008ec:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80008ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80008f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80008f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80008fa:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80008fc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80008fe:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000900:	f022 0202 	bic.w	r2, r2, #2
 8000904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800090c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800090e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000912:	2a00      	cmp	r2, #0
 8000914:	d03e      	beq.n	8000994 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000916:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000918:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800091a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800091e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	3901      	subs	r1, #1
 800092c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000930:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000934:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800093c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800093e:	3901      	subs	r1, #1
 8000940:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000946:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000948:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800094c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000958:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800095a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800095c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800095e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000962:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000964:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000966:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000968:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800096c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800096e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000972:	f023 0303 	bic.w	r3, r3, #3
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800097c:	2300      	movs	r3, #0
 800097e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000982:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800098a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000992:	e7b2      	b.n	80008fa <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800099a:	e7c9      	b.n	8000930 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800099c:	2001      	movs	r0, #1
 800099e:	e7ed      	b.n	800097c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80009a0:	2001      	movs	r0, #1
 80009a2:	e7ee      	b.n	8000982 <HAL_ADC_Init+0x122>
 80009a4:	40012300 	.word	0x40012300
 80009a8:	0f000001 	.word	0x0f000001

080009ac <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80009ac:	6803      	ldr	r3, [r0, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
{
 80009b0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80009b2:	0556      	lsls	r6, r2, #21
{
 80009b4:	4604      	mov	r4, r0
 80009b6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80009b8:	d50b      	bpl.n	80009d2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80009ba:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80009bc:	05d8      	lsls	r0, r3, #23
 80009be:	d508      	bpl.n	80009d2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80009c8:	2300      	movs	r3, #0
 80009ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80009ce:	2001      	movs	r0, #1
}
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80009d2:	f7ff ff3f 	bl	8000854 <HAL_GetTick>
 80009d6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0792      	lsls	r2, r2, #30
 80009de:	d50c      	bpl.n	80009fa <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80009e0:	f06f 0212 	mvn.w	r2, #18
 80009e4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009ec:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80009f4:	d013      	beq.n	8000a1e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80009f6:	2000      	movs	r0, #0
 80009f8:	e7ea      	b.n	80009d0 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 80009fa:	1c69      	adds	r1, r5, #1
 80009fc:	d0ed      	beq.n	80009da <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80009fe:	b945      	cbnz	r5, 8000a12 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000a0e:	2003      	movs	r0, #3
 8000a10:	e7de      	b.n	80009d0 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a12:	f7ff ff1f 	bl	8000854 <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	42a8      	cmp	r0, r5
 8000a1a:	d9dd      	bls.n	80009d8 <HAL_ADC_PollForConversion+0x2c>
 8000a1c:	e7f0      	b.n	8000a00 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a1e:	7e22      	ldrb	r2, [r4, #24]
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d1e8      	bne.n	80009f6 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a26:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000a2a:	d002      	beq.n	8000a32 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000a2c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000a2e:	055b      	lsls	r3, r3, #21
 8000a30:	d4e1      	bmi.n	80009f6 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a38:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000a3c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000a40:	d1d9      	bne.n	80009f6 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6423      	str	r3, [r4, #64]	; 0x40
 8000a4a:	e7c1      	b.n	80009d0 <HAL_ADC_PollForConversion+0x24>

08000a4c <HAL_ADC_Start_IT>:
{
 8000a4c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000a52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d067      	beq.n	8000b2a <HAL_ADC_Start_IT+0xde>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000a60:	6803      	ldr	r3, [r0, #0]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	07d1      	lsls	r1, r2, #31
 8000a66:	d505      	bpl.n	8000a74 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	07d2      	lsls	r2, r2, #31
 8000a6c:	d414      	bmi.n	8000a98 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8000a6e:	2000      	movs	r0, #0
}
 8000a70:	b002      	add	sp, #8
 8000a72:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000a74:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a76:	492e      	ldr	r1, [pc, #184]	; (8000b30 <HAL_ADC_Start_IT+0xe4>)
    __HAL_ADC_ENABLE(hadc);
 8000a78:	f042 0201 	orr.w	r2, r2, #1
 8000a7c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <HAL_ADC_Start_IT+0xe8>)
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	fbb2 f2f1 	udiv	r2, r2, r1
 8000a86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000a8a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000a8c:	9a01      	ldr	r2, [sp, #4]
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d0ea      	beq.n	8000a68 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8000a92:	9a01      	ldr	r2, [sp, #4]
 8000a94:	3a01      	subs	r2, #1
 8000a96:	e7f8      	b.n	8000a8a <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000a98:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000a9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000aa6:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aac:	bf41      	itttt	mi
 8000aae:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000ab0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000ab4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000ab8:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ac0:	bf1c      	itt	ne
 8000ac2:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000ac4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000ac8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ad0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ad4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000adc:	f042 0220 	orr.w	r2, r2, #32
 8000ae0:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <HAL_ADC_Start_IT+0xec>)
 8000ae4:	6851      	ldr	r1, [r2, #4]
 8000ae6:	f011 0f1f 	tst.w	r1, #31
 8000aea:	4914      	ldr	r1, [pc, #80]	; (8000b3c <HAL_ADC_Start_IT+0xf0>)
 8000aec:	d11a      	bne.n	8000b24 <HAL_ADC_Start_IT+0xd8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d006      	beq.n	8000b00 <HAL_ADC_Start_IT+0xb4>
 8000af2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d10b      	bne.n	8000b12 <HAL_ADC_Start_IT+0xc6>
 8000afa:	6852      	ldr	r2, [r2, #4]
 8000afc:	06d2      	lsls	r2, r2, #27
 8000afe:	d1b6      	bne.n	8000a6e <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000b00:	6898      	ldr	r0, [r3, #8]
 8000b02:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000b06:	d1b2      	bne.n	8000a6e <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	e7ae      	b.n	8000a70 <HAL_ADC_Start_IT+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000b12:	490b      	ldr	r1, [pc, #44]	; (8000b40 <HAL_ADC_Start_IT+0xf4>)
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d1aa      	bne.n	8000a6e <HAL_ADC_Start_IT+0x22>
 8000b18:	6852      	ldr	r2, [r2, #4]
 8000b1a:	f002 021f 	and.w	r2, r2, #31
 8000b1e:	2a0f      	cmp	r2, #15
 8000b20:	d9ee      	bls.n	8000b00 <HAL_ADC_Start_IT+0xb4>
 8000b22:	e7a4      	b.n	8000a6e <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000b24:	428b      	cmp	r3, r1
 8000b26:	d1a2      	bne.n	8000a6e <HAL_ADC_Start_IT+0x22>
 8000b28:	e7ea      	b.n	8000b00 <HAL_ADC_Start_IT+0xb4>
  __HAL_LOCK(hadc);
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	e7a0      	b.n	8000a70 <HAL_ADC_Start_IT+0x24>
 8000b2e:	bf00      	nop
 8000b30:	000f4240 	.word	0x000f4240
 8000b34:	20000010 	.word	0x20000010
 8000b38:	40012300 	.word	0x40012300
 8000b3c:	40012000 	.word	0x40012000
 8000b40:	40012200 	.word	0x40012200

08000b44 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000b44:	6803      	ldr	r3, [r0, #0]
 8000b46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000b48:	4770      	bx	lr

08000b4a <HAL_ADC_LevelOutOfWindowCallback>:
 8000b4a:	4770      	bx	lr

08000b4c <HAL_ADC_ErrorCallback>:
 8000b4c:	4770      	bx	lr

08000b4e <HAL_ADC_IRQHandler>:
{
 8000b4e:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000b50:	6803      	ldr	r3, [r0, #0]
 8000b52:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000b54:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000b56:	078d      	lsls	r5, r1, #30
{
 8000b58:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8000b5a:	d52b      	bpl.n	8000bb4 <HAL_ADC_IRQHandler+0x66>
 8000b5c:	0690      	lsls	r0, r2, #26
 8000b5e:	d529      	bpl.n	8000bb4 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b62:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b64:	bf5e      	ittt	pl
 8000b66:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000b68:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000b6c:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000b74:	d117      	bne.n	8000ba6 <HAL_ADC_IRQHandler+0x58>
 8000b76:	7e22      	ldrb	r2, [r4, #24]
 8000b78:	b9aa      	cbnz	r2, 8000ba6 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b7c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000b80:	d002      	beq.n	8000b88 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000b82:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000b84:	0552      	lsls	r2, r2, #21
 8000b86:	d40e      	bmi.n	8000ba6 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	f022 0220 	bic.w	r2, r2, #32
 8000b8e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b96:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b9a:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b9c:	bf5e      	ittt	pl
 8000b9e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000ba0:	f043 0301 	orrpl.w	r3, r3, #1
 8000ba4:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f001 fb72 	bl	8002290 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	f06f 0212 	mvn.w	r2, #18
 8000bb2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000bb8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000bba:	074d      	lsls	r5, r1, #29
 8000bbc:	d532      	bpl.n	8000c24 <HAL_ADC_IRQHandler+0xd6>
 8000bbe:	0610      	lsls	r0, r2, #24
 8000bc0:	d530      	bpl.n	8000c24 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000bc4:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000bc6:	bf5e      	ittt	pl
 8000bc8:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000bca:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000bce:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000bd6:	d11e      	bne.n	8000c16 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000bda:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000bde:	d002      	beq.n	8000be6 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000be0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000be2:	0552      	lsls	r2, r2, #21
 8000be4:	d417      	bmi.n	8000c16 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000be6:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000be8:	0555      	lsls	r5, r2, #21
 8000bea:	d414      	bmi.n	8000c16 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000bec:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000bee:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000bf2:	d110      	bne.n	8000c16 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000bf4:	7e22      	ldrb	r2, [r4, #24]
 8000bf6:	b972      	cbnz	r2, 8000c16 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bfe:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c06:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c0a:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c0c:	bf5e      	ittt	pl
 8000c0e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000c10:	f043 0301 	orrpl.w	r3, r3, #1
 8000c14:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c16:	4620      	mov	r0, r4
 8000c18:	f000 f8cc 	bl	8000db4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	f06f 020c 	mvn.w	r2, #12
 8000c22:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000c28:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000c2a:	07c9      	lsls	r1, r1, #31
 8000c2c:	d50f      	bpl.n	8000c4e <HAL_ADC_IRQHandler+0x100>
 8000c2e:	0655      	lsls	r5, r2, #25
 8000c30:	d50d      	bpl.n	8000c4e <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	07d8      	lsls	r0, r3, #31
 8000c36:	d50a      	bpl.n	8000c4e <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c40:	4620      	mov	r0, r4
 8000c42:	f7ff ff82 	bl	8000b4a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	f06f 0201 	mvn.w	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000c52:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000c54:	0689      	lsls	r1, r1, #26
 8000c56:	d50d      	bpl.n	8000c74 <HAL_ADC_IRQHandler+0x126>
 8000c58:	0152      	lsls	r2, r2, #5
 8000c5a:	d50b      	bpl.n	8000c74 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c5e:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c62:	f042 0202 	orr.w	r2, r2, #2
 8000c66:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8000c68:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c6a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000c6c:	f7ff ff6e 	bl	8000b4c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	601d      	str	r5, [r3, #0]
}
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
	...

08000c78 <HAL_ADC_ConfigChannel>:
{
 8000c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000c7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d06a      	beq.n	8000d5c <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c86:	680d      	ldr	r5, [r1, #0]
 8000c88:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 8000c8a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c8c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000c8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000c92:	b2ac      	uxth	r4, r5
 8000c94:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c96:	d929      	bls.n	8000cec <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c98:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000c9c:	68df      	ldr	r7, [r3, #12]
 8000c9e:	3a1e      	subs	r2, #30
 8000ca0:	f04f 0c07 	mov.w	ip, #7
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	ea27 070c 	bic.w	r7, r7, ip
 8000cac:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cae:	68df      	ldr	r7, [r3, #12]
 8000cb0:	fa06 f202 	lsl.w	r2, r6, r2
 8000cb4:	433a      	orrs	r2, r7
 8000cb6:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8000cb8:	6849      	ldr	r1, [r1, #4]
 8000cba:	2906      	cmp	r1, #6
 8000cbc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000cc0:	d824      	bhi.n	8000d0c <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000cc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cc4:	3a05      	subs	r2, #5
 8000cc6:	261f      	movs	r6, #31
 8000cc8:	4096      	lsls	r6, r2
 8000cca:	ea21 0106 	bic.w	r1, r1, r6
 8000cce:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cd2:	fa04 f202 	lsl.w	r2, r4, r2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000cda:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <HAL_ADC_ConfigChannel+0x128>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d031      	beq.n	8000d44 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000ce6:	4618      	mov	r0, r3
}
 8000ce8:	b003      	add	sp, #12
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cec:	691f      	ldr	r7, [r3, #16]
 8000cee:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8000cf2:	f04f 0c07 	mov.w	ip, #7
 8000cf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfa:	ea27 070c 	bic.w	r7, r7, ip
 8000cfe:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d00:	691f      	ldr	r7, [r3, #16]
 8000d02:	fa06 f202 	lsl.w	r2, r6, r2
 8000d06:	433a      	orrs	r2, r7
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	e7d5      	b.n	8000cb8 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000d0c:	290c      	cmp	r1, #12
 8000d0e:	f04f 011f 	mov.w	r1, #31
 8000d12:	d80b      	bhi.n	8000d2c <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d14:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000d16:	3a23      	subs	r2, #35	; 0x23
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	ea26 0101 	bic.w	r1, r6, r1
 8000d1e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d22:	fa04 f202 	lsl.w	r2, r4, r2
 8000d26:	430a      	orrs	r2, r1
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
 8000d2a:	e7d6      	b.n	8000cda <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d2c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8000d2e:	3a41      	subs	r2, #65	; 0x41
 8000d30:	4091      	lsls	r1, r2
 8000d32:	ea26 0101 	bic.w	r1, r6, r1
 8000d36:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d3a:	fa04 f202 	lsl.w	r2, r4, r2
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d42:	e7ca      	b.n	8000cda <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d44:	2d12      	cmp	r5, #18
 8000d46:	d10b      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0xe8>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_ADC_ConfigChannel+0x12c>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000d50:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	e7c1      	b.n	8000ce0 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	e7c3      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0x70>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_ADC_ConfigChannel+0x130>)
 8000d62:	429d      	cmp	r5, r3
 8000d64:	d001      	beq.n	8000d6a <HAL_ADC_ConfigChannel+0xf2>
 8000d66:	2d11      	cmp	r5, #17
 8000d68:	d1ba      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x68>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_ADC_ConfigChannel+0x12c>)
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000d72:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d7a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_ADC_ConfigChannel+0x130>)
 8000d7e:	429d      	cmp	r5, r3
 8000d80:	d1ae      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_ADC_ConfigChannel+0x134>)
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_ADC_ConfigChannel+0x138>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	4353      	muls	r3, r2
        counter--;
 8000d90:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000d92:	9b01      	ldr	r3, [sp, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0a3      	beq.n	8000ce0 <HAL_ADC_ConfigChannel+0x68>
        counter--;
 8000d98:	9b01      	ldr	r3, [sp, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	e7f8      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x118>
 8000d9e:	bf00      	nop
 8000da0:	40012000 	.word	0x40012000
 8000da4:	40012300 	.word	0x40012300
 8000da8:	10000012 	.word	0x10000012
 8000dac:	20000010 	.word	0x20000010
 8000db0:	000f4240 	.word	0x000f4240

08000db4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000db4:	4770      	bx	lr
	...

08000db8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dc0:	041b      	lsls	r3, r3, #16
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	0200      	lsls	r0, r0, #8
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000dd2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dd4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b570      	push	{r4, r5, r6, lr}
 8000de0:	68dc      	ldr	r4, [r3, #12]
 8000de2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de6:	f1c4 0507 	rsb	r5, r4, #7
 8000dea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dec:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	bf28      	it	cs
 8000df2:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df8:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfa:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	bf8c      	ite	hi
 8000e00:	3c03      	subhi	r4, #3
 8000e02:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	ea21 0303 	bic.w	r3, r1, r3
 8000e08:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0a:	fa06 f404 	lsl.w	r4, r6, r4
 8000e0e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	bfa8      	it	ge
 8000e1a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000e1e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	bfbc      	itt	lt
 8000e24:	f000 000f 	andlt.w	r0, r0, #15
 8000e28:	4a05      	ldrlt	r2, [pc, #20]	; (8000e40 <HAL_NVIC_SetPriority+0x64>)
 8000e2a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	bfaa      	itet	ge
 8000e2e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	e000ed14 	.word	0xe000ed14

08000e44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e44:	2800      	cmp	r0, #0
 8000e46:	db08      	blt.n	8000e5a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e48:	0942      	lsrs	r2, r0, #5
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f000 001f 	and.w	r0, r0, #31
 8000e50:	fa03 f000 	lsl.w	r0, r3, r0
 8000e54:	4b01      	ldr	r3, [pc, #4]	; (8000e5c <HAL_NVIC_EnableIRQ+0x18>)
 8000e56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	3801      	subs	r0, #1
 8000e62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e66:	d20a      	bcs.n	8000e7e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	21f0      	movs	r1, #240	; 0xf0
 8000e70:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d003      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
 8000e9a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e9c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000ea4:	6813      	ldr	r3, [r2, #0]
 8000ea6:	f023 0301 	bic.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000eac:	2000      	movs	r0, #0
}
 8000eae:	4770      	bx	lr

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eb4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800105c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ebc:	4a65      	ldr	r2, [pc, #404]	; (8001054 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ebe:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001060 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000ec6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec8:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000eca:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ecc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	f040 80ac 	bne.w	800102c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed4:	684c      	ldr	r4, [r1, #4]
 8000ed6:	f024 0c10 	bic.w	ip, r4, #16
 8000eda:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ede:	2603      	movs	r6, #3
 8000ee0:	f10c 37ff 	add.w	r7, ip, #4294967295
 8000ee4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ee8:	2f01      	cmp	r7, #1
 8000eea:	ea6f 0606 	mvn.w	r6, r6
 8000eee:	d811      	bhi.n	8000f14 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8000ef0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef2:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	68cf      	ldr	r7, [r1, #12]
 8000ef8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000efc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000f00:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f02:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f08:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f0c:	409f      	lsls	r7, r3
 8000f0e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000f12:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f14:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f16:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1a:	688f      	ldr	r7, [r1, #8]
 8000f1c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f20:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000f28:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2a:	d116      	bne.n	8000f5a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f30:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f34:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f40:	f04f 0c0f 	mov.w	ip, #15
 8000f44:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f48:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	690f      	ldr	r7, [r1, #16]
 8000f4e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f52:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f5a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5e:	f004 0703 	and.w	r7, r4, #3
 8000f62:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f66:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000f6a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6c:	00e6      	lsls	r6, r4, #3
 8000f6e:	d55d      	bpl.n	800102c <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	f04f 0b00 	mov.w	fp, #0
 8000f74:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f78:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7c:	4e36      	ldr	r6, [pc, #216]	; (8001058 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f82:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f86:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f8a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f8e:	9703      	str	r7, [sp, #12]
 8000f90:	9f03      	ldr	r7, [sp, #12]
 8000f92:	f023 0703 	bic.w	r7, r3, #3
 8000f96:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f9a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9e:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000faa:	f04f 0c0f 	mov.w	ip, #15
 8000fae:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb8:	d03f      	beq.n	800103a <HAL_GPIO_Init+0x18a>
 8000fba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fbe:	42b0      	cmp	r0, r6
 8000fc0:	d03d      	beq.n	800103e <HAL_GPIO_Init+0x18e>
 8000fc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fc6:	42b0      	cmp	r0, r6
 8000fc8:	d03b      	beq.n	8001042 <HAL_GPIO_Init+0x192>
 8000fca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fce:	42b0      	cmp	r0, r6
 8000fd0:	d039      	beq.n	8001046 <HAL_GPIO_Init+0x196>
 8000fd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fd6:	42b0      	cmp	r0, r6
 8000fd8:	d037      	beq.n	800104a <HAL_GPIO_Init+0x19a>
 8000fda:	4548      	cmp	r0, r9
 8000fdc:	d037      	beq.n	800104e <HAL_GPIO_Init+0x19e>
 8000fde:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000fe2:	42b0      	cmp	r0, r6
 8000fe4:	bf14      	ite	ne
 8000fe6:	2607      	movne	r6, #7
 8000fe8:	2606      	moveq	r6, #6
 8000fea:	fa06 f60e 	lsl.w	r6, r6, lr
 8000fee:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000ff4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	bf0c      	ite	eq
 8000ffe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001000:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001002:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001004:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001006:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800100a:	bf0c      	ite	eq
 800100c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800100e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001010:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001018:	bf0c      	ite	eq
 800101a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800101c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800101e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001022:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001024:	bf54      	ite	pl
 8001026:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001028:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800102a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102c:	3301      	adds	r3, #1
 800102e:	2b10      	cmp	r3, #16
 8001030:	f47f af49 	bne.w	8000ec6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001034:	b005      	add	sp, #20
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	465e      	mov	r6, fp
 800103c:	e7d5      	b.n	8000fea <HAL_GPIO_Init+0x13a>
 800103e:	2601      	movs	r6, #1
 8001040:	e7d3      	b.n	8000fea <HAL_GPIO_Init+0x13a>
 8001042:	2602      	movs	r6, #2
 8001044:	e7d1      	b.n	8000fea <HAL_GPIO_Init+0x13a>
 8001046:	2603      	movs	r6, #3
 8001048:	e7cf      	b.n	8000fea <HAL_GPIO_Init+0x13a>
 800104a:	2604      	movs	r6, #4
 800104c:	e7cd      	b.n	8000fea <HAL_GPIO_Init+0x13a>
 800104e:	2605      	movs	r6, #5
 8001050:	e7cb      	b.n	8000fea <HAL_GPIO_Init+0x13a>
 8001052:	bf00      	nop
 8001054:	40013c00 	.word	0x40013c00
 8001058:	40020000 	.word	0x40020000
 800105c:	40023800 	.word	0x40023800
 8001060:	40021400 	.word	0x40021400

08001064 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001064:	6903      	ldr	r3, [r0, #16]
 8001066:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001068:	bf14      	ite	ne
 800106a:	2001      	movne	r0, #1
 800106c:	2000      	moveq	r0, #0
 800106e:	4770      	bx	lr

08001070 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	b10a      	cbz	r2, 8001076 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	6181      	str	r1, [r0, #24]
  }
}
 8001074:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	e7fb      	b.n	8001072 <HAL_GPIO_WritePin+0x2>
	...

0800107c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800107c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001080:	6959      	ldr	r1, [r3, #20]
 8001082:	4201      	tst	r1, r0
 8001084:	d002      	beq.n	800108c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001086:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001088:	f001 f8e8 	bl	800225c <HAL_GPIO_EXTI_Callback>
  }
}
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop
 8001090:	40013c00 	.word	0x40013c00

08001094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001098:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800109a:	4604      	mov	r4, r0
 800109c:	b910      	cbnz	r0, 80010a4 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800109e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_RCC_ClockConfig+0x120>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f002 020f 	and.w	r2, r2, #15
 80010ac:	428a      	cmp	r2, r1
 80010ae:	d328      	bcc.n	8001102 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b0:	6821      	ldr	r1, [r4, #0]
 80010b2:	078f      	lsls	r7, r1, #30
 80010b4:	d42d      	bmi.n	8001112 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b6:	07c8      	lsls	r0, r1, #31
 80010b8:	d440      	bmi.n	800113c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <HAL_RCC_ClockConfig+0x120>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	f002 020f 	and.w	r2, r2, #15
 80010c2:	42aa      	cmp	r2, r5
 80010c4:	d865      	bhi.n	8001192 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c6:	6822      	ldr	r2, [r4, #0]
 80010c8:	0751      	lsls	r1, r2, #29
 80010ca:	d46b      	bmi.n	80011a4 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010cc:	0713      	lsls	r3, r2, #28
 80010ce:	d507      	bpl.n	80010e0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010d0:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <HAL_RCC_ClockConfig+0x124>)
 80010d2:	6921      	ldr	r1, [r4, #16]
 80010d4:	6893      	ldr	r3, [r2, #8]
 80010d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010e0:	f000 f892 	bl	8001208 <HAL_RCC_GetSysClockFreq>
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_RCC_ClockConfig+0x124>)
 80010e6:	4a35      	ldr	r2, [pc, #212]	; (80011bc <HAL_RCC_ClockConfig+0x128>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	40d8      	lsrs	r0, r3
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_RCC_ClockConfig+0x12c>)
 80010f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_RCC_ClockConfig+0x130>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	f7ff fb61 	bl	80007c0 <HAL_InitTick>
  return HAL_OK;
 80010fe:	2000      	movs	r0, #0
 8001100:	e7ce      	b.n	80010a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	b2ca      	uxtb	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	428b      	cmp	r3, r1
 800110e:	d1c6      	bne.n	800109e <HAL_RCC_ClockConfig+0xa>
 8001110:	e7ce      	b.n	80010b0 <HAL_RCC_ClockConfig+0x1c>
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	bf1e      	ittt	ne
 800111a:	689a      	ldrne	r2, [r3, #8]
 800111c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001120:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001122:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001124:	bf42      	ittt	mi
 8001126:	689a      	ldrmi	r2, [r3, #8]
 8001128:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800112c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	68a0      	ldr	r0, [r4, #8]
 8001132:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001136:	4302      	orrs	r2, r0
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	e7bc      	b.n	80010b6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113c:	6862      	ldr	r2, [r4, #4]
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_RCC_ClockConfig+0x124>)
 8001140:	2a01      	cmp	r2, #1
 8001142:	d11c      	bne.n	800117e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	d0a8      	beq.n	800109e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114c:	4e1a      	ldr	r6, [pc, #104]	; (80011b8 <HAL_RCC_ClockConfig+0x124>)
 800114e:	68b3      	ldr	r3, [r6, #8]
 8001150:	f023 0303 	bic.w	r3, r3, #3
 8001154:	4313      	orrs	r3, r2
 8001156:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001158:	f7ff fb7c 	bl	8000854 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001160:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	68b3      	ldr	r3, [r6, #8]
 8001164:	6862      	ldr	r2, [r4, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800116e:	d0a4      	beq.n	80010ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001170:	f7ff fb70 	bl	8000854 <HAL_GetTick>
 8001174:	1bc0      	subs	r0, r0, r7
 8001176:	4540      	cmp	r0, r8
 8001178:	d9f3      	bls.n	8001162 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800117a:	2003      	movs	r0, #3
 800117c:	e790      	b.n	80010a0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117e:	1e91      	subs	r1, r2, #2
 8001180:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001184:	d802      	bhi.n	800118c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001186:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800118a:	e7de      	b.n	800114a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	f013 0f02 	tst.w	r3, #2
 8001190:	e7db      	b.n	800114a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	b2ea      	uxtb	r2, r5
 8001194:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	42ab      	cmp	r3, r5
 800119e:	f47f af7e 	bne.w	800109e <HAL_RCC_ClockConfig+0xa>
 80011a2:	e790      	b.n	80010c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <HAL_RCC_ClockConfig+0x124>)
 80011a6:	68e0      	ldr	r0, [r4, #12]
 80011a8:	688b      	ldr	r3, [r1, #8]
 80011aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011ae:	4303      	orrs	r3, r0
 80011b0:	608b      	str	r3, [r1, #8]
 80011b2:	e78b      	b.n	80010cc <HAL_RCC_ClockConfig+0x38>
 80011b4:	40023c00 	.word	0x40023c00
 80011b8:	40023800 	.word	0x40023800
 80011bc:	08003920 	.word	0x08003920
 80011c0:	20000010 	.word	0x20000010
 80011c4:	20000008 	.word	0x20000008

080011c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011d6:	6810      	ldr	r0, [r2, #0]
}
 80011d8:	40d8      	lsrs	r0, r3
 80011da:	4770      	bx	lr
 80011dc:	40023800 	.word	0x40023800
 80011e0:	08003930 	.word	0x08003930
 80011e4:	20000010 	.word	0x20000010

080011e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_RCC_GetPCLK2Freq+0x18>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	4a03      	ldr	r2, [pc, #12]	; (8001204 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011f6:	6810      	ldr	r0, [r2, #0]
}
 80011f8:	40d8      	lsrs	r0, r3
 80011fa:	4770      	bx	lr
 80011fc:	40023800 	.word	0x40023800
 8001200:	08003930 	.word	0x08003930
 8001204:	20000010 	.word	0x20000010

08001208 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001208:	4920      	ldr	r1, [pc, #128]	; (800128c <HAL_RCC_GetSysClockFreq+0x84>)
{
 800120a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120c:	688b      	ldr	r3, [r1, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b08      	cmp	r3, #8
 8001214:	d007      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0x1e>
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d020      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800121a:	481d      	ldr	r0, [pc, #116]	; (8001290 <HAL_RCC_GetSysClockFreq+0x88>)
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_RCC_GetSysClockFreq+0x8c>)
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf18      	it	ne
 8001222:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001224:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001226:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001228:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800122a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800122c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001230:	bf14      	ite	ne
 8001232:	4817      	ldrne	r0, [pc, #92]	; (8001290 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001234:	4817      	ldreq	r0, [pc, #92]	; (8001294 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001236:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800123a:	bf18      	it	ne
 800123c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800123e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001242:	fba1 0100 	umull	r0, r1, r1, r0
 8001246:	f7ff f83b 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_RCC_GetSysClockFreq+0x84>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001252:	3301      	adds	r3, #1
 8001254:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8001256:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800125a:	e7e3      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800125c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001260:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001262:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001266:	bf14      	ite	ne
 8001268:	4809      	ldrne	r0, [pc, #36]	; (8001290 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126a:	480a      	ldreq	r0, [pc, #40]	; (8001294 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001270:	bf18      	it	ne
 8001272:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001274:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001278:	fba1 0100 	umull	r0, r1, r1, r0
 800127c:	f7ff f820 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <HAL_RCC_GetSysClockFreq+0x84>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001288:	e7e5      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x4e>
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	007a1200 	.word	0x007a1200
 8001294:	00f42400 	.word	0x00f42400

08001298 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001298:	6803      	ldr	r3, [r0, #0]
{
 800129a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	07df      	lsls	r7, r3, #31
{
 80012a0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	d410      	bmi.n	80012c6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	079e      	lsls	r6, r3, #30
 80012a8:	d467      	bmi.n	800137a <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	071a      	lsls	r2, r3, #28
 80012ae:	f100 80b2 	bmi.w	8001416 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	075b      	lsls	r3, r3, #29
 80012b6:	f100 80d0 	bmi.w	800145a <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ba:	69a2      	ldr	r2, [r4, #24]
 80012bc:	2a00      	cmp	r2, #0
 80012be:	f040 8139 	bne.w	8001534 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80012c2:	2000      	movs	r0, #0
 80012c4:	e01e      	b.n	8001304 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012c6:	4b97      	ldr	r3, [pc, #604]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	f002 020c 	and.w	r2, r2, #12
 80012ce:	2a04      	cmp	r2, #4
 80012d0:	d010      	beq.n	80012f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012d8:	2a08      	cmp	r2, #8
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	025d      	lsls	r5, r3, #9
 80012e0:	d408      	bmi.n	80012f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b90      	ldr	r3, [pc, #576]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012ea:	2a0c      	cmp	r2, #12
 80012ec:	d10d      	bne.n	800130a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	0250      	lsls	r0, r2, #9
 80012f2:	d50a      	bpl.n	800130a <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0399      	lsls	r1, r3, #14
 80012fa:	d5d3      	bpl.n	80012a4 <HAL_RCC_OscConfig+0xc>
 80012fc:	6863      	ldr	r3, [r4, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1d0      	bne.n	80012a4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001302:	2001      	movs	r0, #1
}
 8001304:	b002      	add	sp, #8
 8001306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130a:	6862      	ldr	r2, [r4, #4]
 800130c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001310:	d111      	bne.n	8001336 <HAL_RCC_OscConfig+0x9e>
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001318:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800131a:	f7ff fa9b 	bl	8000854 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4d81      	ldr	r5, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001320:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	039a      	lsls	r2, r3, #14
 8001326:	d4bd      	bmi.n	80012a4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fa94 	bl	8000854 <HAL_GetTick>
 800132c:	1b80      	subs	r0, r0, r6
 800132e:	2864      	cmp	r0, #100	; 0x64
 8001330:	d9f7      	bls.n	8001322 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001332:	2003      	movs	r0, #3
 8001334:	e7e6      	b.n	8001304 <HAL_RCC_OscConfig+0x6c>
 8001336:	4d7b      	ldr	r5, [pc, #492]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001338:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	d107      	bne.n	8001350 <HAL_RCC_OscConfig+0xb8>
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	602b      	str	r3, [r5, #0]
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	e7e4      	b.n	800131a <HAL_RCC_OscConfig+0x82>
 8001350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001354:	602b      	str	r3, [r5, #0]
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135e:	2a00      	cmp	r2, #0
 8001360:	d1db      	bne.n	800131a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001362:	f7ff fa77 	bl	8000854 <HAL_GetTick>
 8001366:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	039b      	lsls	r3, r3, #14
 800136c:	d59a      	bpl.n	80012a4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136e:	f7ff fa71 	bl	8000854 <HAL_GetTick>
 8001372:	1b80      	subs	r0, r0, r6
 8001374:	2864      	cmp	r0, #100	; 0x64
 8001376:	d9f7      	bls.n	8001368 <HAL_RCC_OscConfig+0xd0>
 8001378:	e7db      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800137a:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	f012 0f0c 	tst.w	r2, #12
 8001382:	d010      	beq.n	80013a6 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800138a:	2a08      	cmp	r2, #8
 800138c:	d102      	bne.n	8001394 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	025f      	lsls	r7, r3, #9
 8001392:	d508      	bpl.n	80013a6 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001394:	4a63      	ldr	r2, [pc, #396]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 8001396:	6893      	ldr	r3, [r2, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d111      	bne.n	80013c4 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a0:	6853      	ldr	r3, [r2, #4]
 80013a2:	025e      	lsls	r6, r3, #9
 80013a4:	d40e      	bmi.n	80013c4 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	0795      	lsls	r5, r2, #30
 80013ac:	d502      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x11c>
 80013ae:	68e2      	ldr	r2, [r4, #12]
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d1a6      	bne.n	8001302 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	6921      	ldr	r1, [r4, #16]
 80013b8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013bc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	e772      	b.n	80012aa <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c4:	68e2      	ldr	r2, [r4, #12]
 80013c6:	4b58      	ldr	r3, [pc, #352]	; (8001528 <HAL_RCC_OscConfig+0x290>)
 80013c8:	b1b2      	cbz	r2, 80013f8 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa41 	bl	8000854 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	4d54      	ldr	r5, [pc, #336]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80013d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	0798      	lsls	r0, r3, #30
 80013da:	d507      	bpl.n	80013ec <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	6922      	ldr	r2, [r4, #16]
 80013e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	e75e      	b.n	80012aa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fa32 	bl	8000854 <HAL_GetTick>
 80013f0:	1b80      	subs	r0, r0, r6
 80013f2:	2802      	cmp	r0, #2
 80013f4:	d9ef      	bls.n	80013d6 <HAL_RCC_OscConfig+0x13e>
 80013f6:	e79c      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80013f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013fa:	f7ff fa2b 	bl	8000854 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	4d49      	ldr	r5, [pc, #292]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001400:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	0799      	lsls	r1, r3, #30
 8001406:	f57f af50 	bpl.w	80012aa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fa23 	bl	8000854 <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f6      	bls.n	8001402 <HAL_RCC_OscConfig+0x16a>
 8001414:	e78d      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001416:	6962      	ldr	r2, [r4, #20]
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <HAL_RCC_OscConfig+0x294>)
 800141a:	b17a      	cbz	r2, 800143c <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001420:	f7ff fa18 	bl	8000854 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	4d3f      	ldr	r5, [pc, #252]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001426:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001428:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800142a:	079f      	lsls	r7, r3, #30
 800142c:	f53f af41 	bmi.w	80012b2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fa10 	bl	8000854 <HAL_GetTick>
 8001434:	1b80      	subs	r0, r0, r6
 8001436:	2802      	cmp	r0, #2
 8001438:	d9f6      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
 800143a:	e77a      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 800143c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800143e:	f7ff fa09 	bl	8000854 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001442:	4d38      	ldr	r5, [pc, #224]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001444:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001446:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001448:	0798      	lsls	r0, r3, #30
 800144a:	f57f af32 	bpl.w	80012b2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fa01 	bl	8000854 <HAL_GetTick>
 8001452:	1b80      	subs	r0, r0, r6
 8001454:	2802      	cmp	r0, #2
 8001456:	d9f6      	bls.n	8001446 <HAL_RCC_OscConfig+0x1ae>
 8001458:	e76b      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 800145c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800145e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001462:	d128      	bne.n	80014b6 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001468:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001478:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4d2d      	ldr	r5, [pc, #180]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	05d9      	lsls	r1, r3, #23
 8001480:	d51b      	bpl.n	80014ba <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001482:	68a3      	ldr	r3, [r4, #8]
 8001484:	4d27      	ldr	r5, [pc, #156]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 8001486:	2b01      	cmp	r3, #1
 8001488:	d127      	bne.n	80014da <HAL_RCC_OscConfig+0x242>
 800148a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001492:	f7ff f9df 	bl	8000854 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001496:	4d23      	ldr	r5, [pc, #140]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001498:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014a0:	079b      	lsls	r3, r3, #30
 80014a2:	d539      	bpl.n	8001518 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80014a4:	2e00      	cmp	r6, #0
 80014a6:	f43f af08 	beq.w	80012ba <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_RCC_OscConfig+0x28c>)
 80014ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	e701      	b.n	80012ba <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2600      	movs	r6, #0
 80014b8:	e7df      	b.n	800147a <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014c2:	f7ff f9c7 	bl	8000854 <HAL_GetTick>
 80014c6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	05da      	lsls	r2, r3, #23
 80014cc:	d4d9      	bmi.n	8001482 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff f9c1 	bl	8000854 <HAL_GetTick>
 80014d2:	1bc0      	subs	r0, r0, r7
 80014d4:	2802      	cmp	r0, #2
 80014d6:	d9f7      	bls.n	80014c8 <HAL_RCC_OscConfig+0x230>
 80014d8:	e72b      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d104      	bne.n	80014e8 <HAL_RCC_OscConfig+0x250>
 80014de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	672b      	str	r3, [r5, #112]	; 0x70
 80014e6:	e7d0      	b.n	800148a <HAL_RCC_OscConfig+0x1f2>
 80014e8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	672a      	str	r2, [r5, #112]	; 0x70
 80014f0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014f2:	f022 0204 	bic.w	r2, r2, #4
 80014f6:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ca      	bne.n	8001492 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 80014fc:	f7ff f9aa 	bl	8000854 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001504:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001508:	0798      	lsls	r0, r3, #30
 800150a:	d5cb      	bpl.n	80014a4 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff f9a2 	bl	8000854 <HAL_GetTick>
 8001510:	1bc0      	subs	r0, r0, r7
 8001512:	4540      	cmp	r0, r8
 8001514:	d9f7      	bls.n	8001506 <HAL_RCC_OscConfig+0x26e>
 8001516:	e70c      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff f99c 	bl	8000854 <HAL_GetTick>
 800151c:	1bc0      	subs	r0, r0, r7
 800151e:	4540      	cmp	r0, r8
 8001520:	d9bd      	bls.n	800149e <HAL_RCC_OscConfig+0x206>
 8001522:	e706      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
 8001524:	40023800 	.word	0x40023800
 8001528:	42470000 	.word	0x42470000
 800152c:	42470e80 	.word	0x42470e80
 8001530:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001534:	4d23      	ldr	r5, [pc, #140]	; (80015c4 <HAL_RCC_OscConfig+0x32c>)
 8001536:	68ab      	ldr	r3, [r5, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	f43f aee0 	beq.w	8001302 <HAL_RCC_OscConfig+0x6a>
 8001542:	4e21      	ldr	r6, [pc, #132]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001544:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001546:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001548:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154a:	d12d      	bne.n	80015a8 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 800154c:	f7ff f982 	bl	8000854 <HAL_GetTick>
 8001550:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	0199      	lsls	r1, r3, #6
 8001556:	d421      	bmi.n	800159c <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001558:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800155c:	4313      	orrs	r3, r2
 800155e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001560:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001564:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001566:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800156a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800156c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001570:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	4c14      	ldr	r4, [pc, #80]	; (80015c4 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001574:	0852      	lsrs	r2, r2, #1
 8001576:	3a01      	subs	r2, #1
 8001578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800157c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800157e:	2301      	movs	r3, #1
 8001580:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001582:	f7ff f967 	bl	8000854 <HAL_GetTick>
 8001586:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	019a      	lsls	r2, r3, #6
 800158c:	f53f ae99 	bmi.w	80012c2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff f960 	bl	8000854 <HAL_GetTick>
 8001594:	1b40      	subs	r0, r0, r5
 8001596:	2802      	cmp	r0, #2
 8001598:	d9f6      	bls.n	8001588 <HAL_RCC_OscConfig+0x2f0>
 800159a:	e6ca      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff f95a 	bl	8000854 <HAL_GetTick>
 80015a0:	1bc0      	subs	r0, r0, r7
 80015a2:	2802      	cmp	r0, #2
 80015a4:	d9d5      	bls.n	8001552 <HAL_RCC_OscConfig+0x2ba>
 80015a6:	e6c4      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80015a8:	f7ff f954 	bl	8000854 <HAL_GetTick>
 80015ac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	019b      	lsls	r3, r3, #6
 80015b2:	f57f ae86 	bpl.w	80012c2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff f94d 	bl	8000854 <HAL_GetTick>
 80015ba:	1b00      	subs	r0, r0, r4
 80015bc:	2802      	cmp	r0, #2
 80015be:	d9f6      	bls.n	80015ae <HAL_RCC_OscConfig+0x316>
 80015c0:	e6b7      	b.n	8001332 <HAL_RCC_OscConfig+0x9a>
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	42470060 	.word	0x42470060

080015cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015cc:	6a03      	ldr	r3, [r0, #32]
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015d4:	6a03      	ldr	r3, [r0, #32]
{
 80015d6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80015de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80015e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80015e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80015e6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80015ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80015ec:	4d0e      	ldr	r5, [pc, #56]	; (8001628 <TIM_OC1_SetConfig+0x5c>)
 80015ee:	42a8      	cmp	r0, r5
 80015f0:	d002      	beq.n	80015f8 <TIM_OC1_SetConfig+0x2c>
 80015f2:	4e0e      	ldr	r6, [pc, #56]	; (800162c <TIM_OC1_SetConfig+0x60>)
 80015f4:	42b0      	cmp	r0, r6
 80015f6:	d110      	bne.n	800161a <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80015f8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80015fa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80015fe:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001600:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001602:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001606:	d002      	beq.n	800160e <TIM_OC1_SetConfig+0x42>
 8001608:	4d08      	ldr	r5, [pc, #32]	; (800162c <TIM_OC1_SetConfig+0x60>)
 800160a:	42a8      	cmp	r0, r5
 800160c:	d105      	bne.n	800161a <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800160e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001612:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001616:	4335      	orrs	r5, r6
 8001618:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800161a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800161c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800161e:	684a      	ldr	r2, [r1, #4]
 8001620:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001622:	6203      	str	r3, [r0, #32]
}
 8001624:	bd70      	pop	{r4, r5, r6, pc}
 8001626:	bf00      	nop
 8001628:	40010000 	.word	0x40010000
 800162c:	40010400 	.word	0x40010400

08001630 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001630:	6a03      	ldr	r3, [r0, #32]
 8001632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001636:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001638:	6a03      	ldr	r3, [r0, #32]
{
 800163a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800163c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800163e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001640:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001642:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001646:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001648:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800164a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800164e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001652:	4d11      	ldr	r5, [pc, #68]	; (8001698 <TIM_OC3_SetConfig+0x68>)
 8001654:	42a8      	cmp	r0, r5
 8001656:	d003      	beq.n	8001660 <TIM_OC3_SetConfig+0x30>
 8001658:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800165c:	42a8      	cmp	r0, r5
 800165e:	d114      	bne.n	800168a <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001660:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001666:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800166a:	4d0b      	ldr	r5, [pc, #44]	; (8001698 <TIM_OC3_SetConfig+0x68>)
 800166c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800166e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001672:	d003      	beq.n	800167c <TIM_OC3_SetConfig+0x4c>
 8001674:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001678:	42a8      	cmp	r0, r5
 800167a:	d106      	bne.n	800168a <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800167c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001680:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001684:	4335      	orrs	r5, r6
 8001686:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800168a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800168c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800168e:	684a      	ldr	r2, [r1, #4]
 8001690:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001692:	6203      	str	r3, [r0, #32]
}
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	bf00      	nop
 8001698:	40010000 	.word	0x40010000

0800169c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800169c:	6a03      	ldr	r3, [r0, #32]
 800169e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016a4:	6a03      	ldr	r3, [r0, #32]
{
 80016a6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016aa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80016b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016c0:	4d08      	ldr	r5, [pc, #32]	; (80016e4 <TIM_OC4_SetConfig+0x48>)
 80016c2:	42a8      	cmp	r0, r5
 80016c4:	d003      	beq.n	80016ce <TIM_OC4_SetConfig+0x32>
 80016c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016ca:	42a8      	cmp	r0, r5
 80016cc:	d104      	bne.n	80016d8 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016ce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80016d0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016dc:	684a      	ldr	r2, [r1, #4]
 80016de:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016e0:	6203      	str	r3, [r0, #32]
}
 80016e2:	bd30      	pop	{r4, r5, pc}
 80016e4:	40010000 	.word	0x40010000

080016e8 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ee:	6803      	ldr	r3, [r0, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f6:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80016f8:	bf1e      	ittt	ne
 80016fa:	681a      	ldrne	r2, [r3, #0]
 80016fc:	f042 0201 	orrne.w	r2, r2, #1
 8001700:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001702:	2301      	movs	r3, #1
 8001704:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001708:	2000      	movs	r0, #0
 800170a:	4770      	bx	lr

0800170c <HAL_TIM_OC_MspInit>:
 800170c:	4770      	bx	lr
	...

08001710 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001710:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001712:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001714:	4290      	cmp	r0, r2
 8001716:	d012      	beq.n	800173e <TIM_Base_SetConfig+0x2e>
 8001718:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800171c:	d00f      	beq.n	800173e <TIM_Base_SetConfig+0x2e>
 800171e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001722:	4290      	cmp	r0, r2
 8001724:	d00b      	beq.n	800173e <TIM_Base_SetConfig+0x2e>
 8001726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172a:	4290      	cmp	r0, r2
 800172c:	d007      	beq.n	800173e <TIM_Base_SetConfig+0x2e>
 800172e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001732:	4290      	cmp	r0, r2
 8001734:	d003      	beq.n	800173e <TIM_Base_SetConfig+0x2e>
 8001736:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800173a:	4290      	cmp	r0, r2
 800173c:	d119      	bne.n	8001772 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800173e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001744:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <TIM_Base_SetConfig+0xc4>)
 8001748:	4290      	cmp	r0, r2
 800174a:	d029      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 800174c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001750:	d026      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001752:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001756:	4290      	cmp	r0, r2
 8001758:	d022      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 800175a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800175e:	4290      	cmp	r0, r2
 8001760:	d01e      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001762:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001766:	4290      	cmp	r0, r2
 8001768:	d01a      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 800176a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800176e:	4290      	cmp	r0, r2
 8001770:	d016      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001772:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <TIM_Base_SetConfig+0xc8>)
 8001774:	4290      	cmp	r0, r2
 8001776:	d013      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001778:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800177c:	4290      	cmp	r0, r2
 800177e:	d00f      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001784:	4290      	cmp	r0, r2
 8001786:	d00b      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001788:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800178c:	4290      	cmp	r0, r2
 800178e:	d007      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001794:	4290      	cmp	r0, r2
 8001796:	d003      	beq.n	80017a0 <TIM_Base_SetConfig+0x90>
 8001798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179c:	4290      	cmp	r0, r2
 800179e:	d103      	bne.n	80017a8 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017a0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017a6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017a8:	694a      	ldr	r2, [r1, #20]
 80017aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017ae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80017b0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017b2:	688b      	ldr	r3, [r1, #8]
 80017b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017b6:	680b      	ldr	r3, [r1, #0]
 80017b8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <TIM_Base_SetConfig+0xc4>)
 80017bc:	4298      	cmp	r0, r3
 80017be:	d003      	beq.n	80017c8 <TIM_Base_SetConfig+0xb8>
 80017c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c4:	4298      	cmp	r0, r3
 80017c6:	d101      	bne.n	80017cc <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80017c8:	690b      	ldr	r3, [r1, #16]
 80017ca:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80017cc:	2301      	movs	r3, #1
 80017ce:	6143      	str	r3, [r0, #20]
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40014000 	.word	0x40014000

080017dc <HAL_TIM_Base_Init>:
{
 80017dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80017de:	4604      	mov	r4, r0
 80017e0:	b1a0      	cbz	r0, 800180c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80017e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017ea:	b91b      	cbnz	r3, 80017f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017f0:	f000 fd90 	bl	8002314 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017fa:	6820      	ldr	r0, [r4, #0]
 80017fc:	1d21      	adds	r1, r4, #4
 80017fe:	f7ff ff87 	bl	8001710 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001802:	2301      	movs	r3, #1
 8001804:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001808:	2000      	movs	r0, #0
}
 800180a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800180c:	2001      	movs	r0, #1
 800180e:	e7fc      	b.n	800180a <HAL_TIM_Base_Init+0x2e>

08001810 <HAL_TIM_OC_Init>:
{
 8001810:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001812:	4604      	mov	r4, r0
 8001814:	b1a0      	cbz	r0, 8001840 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001816:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800181a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800181e:	b91b      	cbnz	r3, 8001828 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001820:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001824:	f7ff ff72 	bl	800170c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001828:	2302      	movs	r3, #2
 800182a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	1d21      	adds	r1, r4, #4
 8001832:	f7ff ff6d 	bl	8001710 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001836:	2301      	movs	r3, #1
 8001838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800183c:	2000      	movs	r0, #0
}
 800183e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	e7fc      	b.n	800183e <HAL_TIM_OC_Init+0x2e>

08001844 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001844:	6a03      	ldr	r3, [r0, #32]
 8001846:	f023 0310 	bic.w	r3, r3, #16
 800184a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800184c:	6a03      	ldr	r3, [r0, #32]
{
 800184e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001850:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001852:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001854:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001856:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800185a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800185e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001860:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001864:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001868:	4d10      	ldr	r5, [pc, #64]	; (80018ac <TIM_OC2_SetConfig+0x68>)
 800186a:	42a8      	cmp	r0, r5
 800186c:	d003      	beq.n	8001876 <TIM_OC2_SetConfig+0x32>
 800186e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001872:	42a8      	cmp	r0, r5
 8001874:	d114      	bne.n	80018a0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001876:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800187c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001880:	4d0a      	ldr	r5, [pc, #40]	; (80018ac <TIM_OC2_SetConfig+0x68>)
 8001882:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001888:	d003      	beq.n	8001892 <TIM_OC2_SetConfig+0x4e>
 800188a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800188e:	42a8      	cmp	r0, r5
 8001890:	d106      	bne.n	80018a0 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001892:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001896:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800189a:	4335      	orrs	r5, r6
 800189c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80018a0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80018a2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80018a4:	684a      	ldr	r2, [r1, #4]
 80018a6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80018a8:	6203      	str	r3, [r0, #32]
}
 80018aa:	bd70      	pop	{r4, r5, r6, pc}
 80018ac:	40010000 	.word	0x40010000

080018b0 <HAL_TIM_OC_ConfigChannel>:
{
 80018b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80018b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018b6:	2b01      	cmp	r3, #1
{
 80018b8:	4604      	mov	r4, r0
 80018ba:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80018be:	d018      	beq.n	80018f2 <HAL_TIM_OC_ConfigChannel+0x42>
 80018c0:	2301      	movs	r3, #1
 80018c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80018c6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80018ca:	461d      	mov	r5, r3
  switch (Channel)
 80018cc:	2a0c      	cmp	r2, #12
 80018ce:	d80b      	bhi.n	80018e8 <HAL_TIM_OC_ConfigChannel+0x38>
 80018d0:	e8df f002 	tbb	[pc, r2]
 80018d4:	0a0a0a07 	.word	0x0a0a0a07
 80018d8:	0a0a0a10 	.word	0x0a0a0a10
 80018dc:	0a0a0a14 	.word	0x0a0a0a14
 80018e0:	18          	.byte	0x18
 80018e1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018e2:	6820      	ldr	r0, [r4, #0]
 80018e4:	f7ff fe72 	bl	80015cc <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 80018e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018ea:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80018ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018f4:	6820      	ldr	r0, [r4, #0]
 80018f6:	f7ff ffa5 	bl	8001844 <TIM_OC2_SetConfig>
      break;
 80018fa:	e7f5      	b.n	80018e8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018fc:	6820      	ldr	r0, [r4, #0]
 80018fe:	f7ff fe97 	bl	8001630 <TIM_OC3_SetConfig>
      break;
 8001902:	e7f1      	b.n	80018e8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001904:	6820      	ldr	r0, [r4, #0]
 8001906:	f7ff fec9 	bl	800169c <TIM_OC4_SetConfig>
      break;
 800190a:	e7ed      	b.n	80018e8 <HAL_TIM_OC_ConfigChannel+0x38>

0800190c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800190c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800190e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001910:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001912:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001916:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800191a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800191c:	6083      	str	r3, [r0, #8]
}
 800191e:	bd10      	pop	{r4, pc}

08001920 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001920:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001924:	2b01      	cmp	r3, #1
{
 8001926:	b570      	push	{r4, r5, r6, lr}
 8001928:	4604      	mov	r4, r0
 800192a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800192e:	d019      	beq.n	8001964 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001934:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001936:	2301      	movs	r3, #1
 8001938:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800193c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800193e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001946:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001948:	680b      	ldr	r3, [r1, #0]
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d065      	beq.n	8001a1a <HAL_TIM_ConfigClockSource+0xfa>
 800194e:	d815      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x5c>
 8001950:	2b10      	cmp	r3, #16
 8001952:	d00c      	beq.n	800196e <HAL_TIM_ConfigClockSource+0x4e>
 8001954:	d807      	bhi.n	8001966 <HAL_TIM_ConfigClockSource+0x46>
 8001956:	b153      	cbz	r3, 800196e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001958:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800195a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800195c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001960:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001964:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001966:	2b20      	cmp	r3, #32
 8001968:	d001      	beq.n	800196e <HAL_TIM_ConfigClockSource+0x4e>
 800196a:	2b30      	cmp	r3, #48	; 0x30
 800196c:	d1f4      	bne.n	8001958 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800196e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001970:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001974:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001978:	4313      	orrs	r3, r2
 800197a:	e01a      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800197c:	2b60      	cmp	r3, #96	; 0x60
 800197e:	d034      	beq.n	80019ea <HAL_TIM_ConfigClockSource+0xca>
 8001980:	d819      	bhi.n	80019b6 <HAL_TIM_ConfigClockSource+0x96>
 8001982:	2b50      	cmp	r3, #80	; 0x50
 8001984:	d1e8      	bne.n	8001958 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001986:	684a      	ldr	r2, [r1, #4]
 8001988:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800198a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800198c:	6a05      	ldr	r5, [r0, #32]
 800198e:	f025 0501 	bic.w	r5, r5, #1
 8001992:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001994:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001996:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800199a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800199e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80019a2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80019a4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019a6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80019a8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019ae:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80019b2:	6083      	str	r3, [r0, #8]
 80019b4:	e7d0      	b.n	8001958 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80019b6:	2b70      	cmp	r3, #112	; 0x70
 80019b8:	d00c      	beq.n	80019d4 <HAL_TIM_ConfigClockSource+0xb4>
 80019ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019be:	d1cb      	bne.n	8001958 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80019c0:	68cb      	ldr	r3, [r1, #12]
 80019c2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80019c6:	f7ff ffa1 	bl	800190c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	6893      	ldr	r3, [r2, #8]
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d2:	e008      	b.n	80019e6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80019d4:	68cb      	ldr	r3, [r1, #12]
 80019d6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80019da:	f7ff ff97 	bl	800190c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019e6:	6093      	str	r3, [r2, #8]
      break;
 80019e8:	e7b6      	b.n	8001958 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019ea:	684d      	ldr	r5, [r1, #4]
 80019ec:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ee:	6a01      	ldr	r1, [r0, #32]
 80019f0:	f021 0110 	bic.w	r1, r1, #16
 80019f4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019f6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80019f8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019fa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a02:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a06:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001a0a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a0c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001a0e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a14:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001a18:	e7cb      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a1a:	684a      	ldr	r2, [r1, #4]
 8001a1c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a1e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a20:	6a05      	ldr	r5, [r0, #32]
 8001a22:	f025 0501 	bic.w	r5, r5, #1
 8001a26:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a28:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a2a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a32:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001a36:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001a38:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a3a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001a3c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a42:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001a46:	e7b4      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x92>

08001a48 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a48:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001a4a:	f001 011f 	and.w	r1, r1, #31
{
 8001a4e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001a50:	2401      	movs	r4, #1
 8001a52:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001a54:	ea23 0304 	bic.w	r3, r3, r4
 8001a58:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001a5a:	6a03      	ldr	r3, [r0, #32]
 8001a5c:	408a      	lsls	r2, r1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	6202      	str	r2, [r0, #32]
}
 8001a62:	bd10      	pop	{r4, pc}

08001a64 <HAL_TIM_OC_Start>:
{
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	6800      	ldr	r0, [r0, #0]
 8001a6c:	f7ff ffec 	bl	8001a48 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_TIM_OC_Start+0x3c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d003      	beq.n	8001a80 <HAL_TIM_OC_Start+0x1c>
 8001a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d103      	bne.n	8001a88 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a8e:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001a90:	bf1e      	ittt	ne
 8001a92:	681a      	ldrne	r2, [r3, #0]
 8001a94:	f042 0201 	orrne.w	r2, r2, #1
 8001a98:	601a      	strne	r2, [r3, #0]
}
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40010000 	.word	0x40010000

08001aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001aa4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001aa8:	2b01      	cmp	r3, #1
{
 8001aaa:	b530      	push	{r4, r5, lr}
 8001aac:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001ab0:	d035      	beq.n	8001b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ab6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ab8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001aba:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001abc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001ac0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ac2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001ac4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001ac8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001aca:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001acc:	4c15      	ldr	r4, [pc, #84]	; (8001b24 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8001ace:	42a3      	cmp	r3, r4
 8001ad0:	d01a      	beq.n	8001b08 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad6:	d017      	beq.n	8001b08 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001ad8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001adc:	42a3      	cmp	r3, r4
 8001ade:	d013      	beq.n	8001b08 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001ae0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ae4:	42a3      	cmp	r3, r4
 8001ae6:	d00f      	beq.n	8001b08 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001ae8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aec:	42a3      	cmp	r3, r4
 8001aee:	d00b      	beq.n	8001b08 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001af0:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8001af4:	42a3      	cmp	r3, r4
 8001af6:	d007      	beq.n	8001b08 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001af8:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8001afc:	42a3      	cmp	r3, r4
 8001afe:	d003      	beq.n	8001b08 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001b00:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001b04:	42a3      	cmp	r3, r4
 8001b06:	d104      	bne.n	8001b12 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b08:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b0e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001b1e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001b20:	bd30      	pop	{r4, r5, pc}
 8001b22:	bf00      	nop
 8001b24:	40010000 	.word	0x40010000

08001b28 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b28:	6803      	ldr	r3, [r0, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001b40:	4770      	bx	lr
	...

08001b44 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b44:	6803      	ldr	r3, [r0, #0]
 8001b46:	68c1      	ldr	r1, [r0, #12]
 8001b48:	691a      	ldr	r2, [r3, #16]
{
 8001b4a:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b4c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8001b50:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b52:	430a      	orrs	r2, r1
 8001b54:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b56:	6925      	ldr	r5, [r4, #16]
 8001b58:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b5a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b5c:	69c0      	ldr	r0, [r0, #28]
 8001b5e:	432a      	orrs	r2, r5
 8001b60:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001b62:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b66:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001b68:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b6c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	69a1      	ldr	r1, [r4, #24]
 8001b76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b7a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b80:	615a      	str	r2, [r3, #20]
 8001b82:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b84:	d129      	bne.n	8001bda <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d003      	beq.n	8001b92 <UART_SetConfig+0x4e>
 8001b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d120      	bne.n	8001bd4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b92:	f7ff fb29 	bl	80011e8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b96:	6862      	ldr	r2, [r4, #4]
 8001b98:	2600      	movs	r6, #0
 8001b9a:	1892      	adds	r2, r2, r2
 8001b9c:	f04f 0119 	mov.w	r1, #25
 8001ba0:	eb46 0306 	adc.w	r3, r6, r6
 8001ba4:	fba0 0101 	umull	r0, r1, r0, r1
 8001ba8:	f7fe fb8a 	bl	80002c0 <__aeabi_uldivmod>
 8001bac:	2164      	movs	r1, #100	; 0x64
 8001bae:	fbb0 f5f1 	udiv	r5, r0, r1
 8001bb2:	fb01 0315 	mls	r3, r1, r5, r0
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	3332      	adds	r3, #50	; 0x32
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	f003 0207 	and.w	r2, r3, #7
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	6821      	ldr	r1, [r4, #0]
 8001bc6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8001bca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bce:	4413      	add	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bd4:	f7ff faf8 	bl	80011c8 <HAL_RCC_GetPCLK1Freq>
 8001bd8:	e7dd      	b.n	8001b96 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d002      	beq.n	8001be4 <UART_SetConfig+0xa0>
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <UART_SetConfig+0xdc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d117      	bne.n	8001c14 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001be4:	f7ff fb00 	bl	80011e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001be8:	6863      	ldr	r3, [r4, #4]
 8001bea:	2119      	movs	r1, #25
 8001bec:	009a      	lsls	r2, r3, #2
 8001bee:	fba0 0101 	umull	r0, r1, r0, r1
 8001bf2:	0f9b      	lsrs	r3, r3, #30
 8001bf4:	f7fe fb64 	bl	80002c0 <__aeabi_uldivmod>
 8001bf8:	2264      	movs	r2, #100	; 0x64
 8001bfa:	fbb0 f1f2 	udiv	r1, r0, r2
 8001bfe:	fb02 0311 	mls	r3, r2, r1, r0
 8001c02:	6824      	ldr	r4, [r4, #0]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	3332      	adds	r3, #50	; 0x32
 8001c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c0c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001c10:	60a3      	str	r3, [r4, #8]
}
 8001c12:	e7de      	b.n	8001bd2 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c14:	f7ff fad8 	bl	80011c8 <HAL_RCC_GetPCLK1Freq>
 8001c18:	e7e6      	b.n	8001be8 <UART_SetConfig+0xa4>
 8001c1a:	bf00      	nop
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40011400 	.word	0x40011400

08001c24 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	4604      	mov	r4, r0
 8001c28:	460e      	mov	r6, r1
 8001c2a:	4617      	mov	r7, r2
 8001c2c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2e:	6821      	ldr	r1, [r4, #0]
 8001c30:	680b      	ldr	r3, [r1, #0]
 8001c32:	ea36 0303 	bics.w	r3, r6, r3
 8001c36:	d101      	bne.n	8001c3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001c38:	2000      	movs	r0, #0
 8001c3a:	e014      	b.n	8001c66 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001c3c:	1c6b      	adds	r3, r5, #1
 8001c3e:	d0f7      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c40:	b995      	cbnz	r5, 8001c68 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c54:	2320      	movs	r3, #32
 8001c56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001c64:	2003      	movs	r0, #3
}
 8001c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c68:	f7fe fdf4 	bl	8000854 <HAL_GetTick>
 8001c6c:	1bc0      	subs	r0, r0, r7
 8001c6e:	4285      	cmp	r5, r0
 8001c70:	d2dd      	bcs.n	8001c2e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c72:	e7e6      	b.n	8001c42 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c74 <HAL_UART_Init>:
{
 8001c74:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001c76:	4604      	mov	r4, r0
 8001c78:	b340      	cbz	r0, 8001ccc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c82:	b91b      	cbnz	r3, 8001c8c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c88:	f000 fb86 	bl	8002398 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c8c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c8e:	2324      	movs	r3, #36	; 0x24
 8001c90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c94:	68d3      	ldr	r3, [r2, #12]
 8001c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c9a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff ff51 	bl	8001b44 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001caa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001cbe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001cc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001cc6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001cca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
 8001cce:	e7fc      	b.n	8001cca <HAL_UART_Init+0x56>

08001cd0 <HAL_UART_Transmit>:
{
 8001cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cda:	2b20      	cmp	r3, #32
{
 8001cdc:	4604      	mov	r4, r0
 8001cde:	460d      	mov	r5, r1
 8001ce0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ce2:	d14f      	bne.n	8001d84 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d04b      	beq.n	8001d80 <HAL_UART_Transmit+0xb0>
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d049      	beq.n	8001d80 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8001cec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d047      	beq.n	8001d84 <HAL_UART_Transmit+0xb4>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfa:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cfe:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d00:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d04:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001d08:	f7fe fda4 	bl	8000854 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001d0c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001d10:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001d12:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001d16:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001d1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	b953      	cbnz	r3, 8001d36 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4632      	mov	r2, r6
 8001d24:	2140      	movs	r1, #64	; 0x40
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ff7c 	bl	8001c24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d2c:	b998      	cbnz	r0, 8001d56 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001d34:	e010      	b.n	8001d58 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 8001d36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d3e:	68a3      	ldr	r3, [r4, #8]
 8001d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d44:	4632      	mov	r2, r6
 8001d46:	463b      	mov	r3, r7
 8001d48:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001d4c:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d4e:	d10e      	bne.n	8001d6e <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d50:	f7ff ff68 	bl	8001c24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d54:	b110      	cbz	r0, 8001d5c <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 8001d56:	2003      	movs	r0, #3
}
 8001d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d5c:	882b      	ldrh	r3, [r5, #0]
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d64:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d66:	6923      	ldr	r3, [r4, #16]
 8001d68:	b943      	cbnz	r3, 8001d7c <HAL_UART_Transmit+0xac>
          pData += 2U;
 8001d6a:	3502      	adds	r5, #2
 8001d6c:	e7d5      	b.n	8001d1a <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6e:	f7ff ff59 	bl	8001c24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d1ef      	bne.n	8001d56 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	782a      	ldrb	r2, [r5, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	3501      	adds	r5, #1
 8001d7e:	e7cc      	b.n	8001d1a <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
 8001d82:	e7e9      	b.n	8001d58 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8001d84:	2002      	movs	r0, #2
 8001d86:	e7e7      	b.n	8001d58 <HAL_UART_Transmit+0x88>

08001d88 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d88:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d120      	bne.n	8001dd2 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001d90:	b1e9      	cbz	r1, 8001dce <HAL_UART_Receive_IT+0x46>
 8001d92:	b1e2      	cbz	r2, 8001dce <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001d94:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d01a      	beq.n	8001dd2 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001d9c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001d9e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da0:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001da2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001da6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001daa:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001dac:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001dae:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001db0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001db4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001db8:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001dba:	6951      	ldr	r1, [r2, #20]
 8001dbc:	f041 0101 	orr.w	r1, r1, #1
 8001dc0:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001dc2:	68d1      	ldr	r1, [r2, #12]
 8001dc4:	f041 0120 	orr.w	r1, r1, #32
 8001dc8:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001dca:	4618      	mov	r0, r3
 8001dcc:	4770      	bx	lr
      return HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	4770      	bx	lr
    return HAL_BUSY;
 8001dd2:	2002      	movs	r0, #2
}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_UART_TxCpltCallback>:
 8001dd6:	4770      	bx	lr

08001dd8 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dd8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ddc:	2b22      	cmp	r3, #34	; 0x22
{
 8001dde:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001de0:	d133      	bne.n	8001e4a <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001de2:	6881      	ldr	r1, [r0, #8]
 8001de4:	6904      	ldr	r4, [r0, #16]
 8001de6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001de8:	6802      	ldr	r2, [r0, #0]
 8001dea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001dee:	d123      	bne.n	8001e38 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001df0:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001df2:	b9ec      	cbnz	r4, 8001e30 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001dfc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001dfe:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001e00:	3c01      	subs	r4, #1
 8001e02:	b2a4      	uxth	r4, r4
 8001e04:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001e06:	b98c      	cbnz	r4, 8001e2c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e08:	6803      	ldr	r3, [r0, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	f022 0220 	bic.w	r2, r2, #32
 8001e10:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e18:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001e22:	2320      	movs	r3, #32
 8001e24:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001e28:	f000 fa1e 	bl	8002268 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	e00d      	b.n	8001e4c <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f823 2b01 	strh.w	r2, [r3], #1
 8001e36:	e7e1      	b.n	8001dfc <UART_Receive_IT+0x24>
 8001e38:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e3a:	6852      	ldr	r2, [r2, #4]
 8001e3c:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e3e:	b90c      	cbnz	r4, 8001e44 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e7dc      	b.n	8001dfe <UART_Receive_IT+0x26>
 8001e44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e48:	e7fa      	b.n	8001e40 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001e4a:	2002      	movs	r0, #2
}
 8001e4c:	bd10      	pop	{r4, pc}

08001e4e <HAL_UART_ErrorCallback>:
 8001e4e:	4770      	bx	lr

08001e50 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e50:	6803      	ldr	r3, [r0, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e54:	68d9      	ldr	r1, [r3, #12]
{
 8001e56:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001e58:	0716      	lsls	r6, r2, #28
{
 8001e5a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e5c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001e5e:	d107      	bne.n	8001e70 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e60:	0696      	lsls	r6, r2, #26
 8001e62:	d55a      	bpl.n	8001f1a <HAL_UART_IRQHandler+0xca>
 8001e64:	068d      	lsls	r5, r1, #26
 8001e66:	d558      	bpl.n	8001f1a <HAL_UART_IRQHandler+0xca>
}
 8001e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001e6c:	f7ff bfb4 	b.w	8001dd8 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e70:	f015 0501 	ands.w	r5, r5, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_UART_IRQHandler+0x2c>
 8001e76:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001e7a:	d04e      	beq.n	8001f1a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e7c:	07d0      	lsls	r0, r2, #31
 8001e7e:	d505      	bpl.n	8001e8c <HAL_UART_IRQHandler+0x3c>
 8001e80:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e82:	bf42      	ittt	mi
 8001e84:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001e86:	f043 0301 	orrmi.w	r3, r3, #1
 8001e8a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e8c:	0756      	lsls	r6, r2, #29
 8001e8e:	d504      	bpl.n	8001e9a <HAL_UART_IRQHandler+0x4a>
 8001e90:	b11d      	cbz	r5, 8001e9a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e9a:	0790      	lsls	r0, r2, #30
 8001e9c:	d504      	bpl.n	8001ea8 <HAL_UART_IRQHandler+0x58>
 8001e9e:	b11d      	cbz	r5, 8001ea8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ea8:	0713      	lsls	r3, r2, #28
 8001eaa:	d506      	bpl.n	8001eba <HAL_UART_IRQHandler+0x6a>
 8001eac:	068e      	lsls	r6, r1, #26
 8001eae:	d400      	bmi.n	8001eb2 <HAL_UART_IRQHandler+0x62>
 8001eb0:	b11d      	cbz	r5, 8001eba <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ebc:	b343      	cbz	r3, 8001f10 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ebe:	0695      	lsls	r5, r2, #26
 8001ec0:	d504      	bpl.n	8001ecc <HAL_UART_IRQHandler+0x7c>
 8001ec2:	0688      	lsls	r0, r1, #26
 8001ec4:	d502      	bpl.n	8001ecc <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff ff86 	bl	8001dd8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ed0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ed2:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001ed4:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ed6:	d402      	bmi.n	8001ede <HAL_UART_IRQHandler+0x8e>
 8001ed8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001edc:	d019      	beq.n	8001f12 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001ede:	f7ff fe23 	bl	8001b28 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	0652      	lsls	r2, r2, #25
 8001ee8:	d50f      	bpl.n	8001f0a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eea:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001eec:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001ef4:	b148      	cbz	r0, 8001f0a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_UART_IRQHandler+0x140>)
 8001ef8:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001efa:	f7fe ffc7 	bl	8000e8c <HAL_DMA_Abort_IT>
 8001efe:	b138      	cbz	r0, 8001f10 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f00:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f08:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff ff9f 	bl	8001e4e <HAL_UART_ErrorCallback>
}
 8001f10:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001f12:	f7ff ff9c 	bl	8001e4e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f16:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001f18:	e7fa      	b.n	8001f10 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f1a:	0616      	lsls	r6, r2, #24
 8001f1c:	d528      	bpl.n	8001f70 <HAL_UART_IRQHandler+0x120>
 8001f1e:	060d      	lsls	r5, r1, #24
 8001f20:	d526      	bpl.n	8001f70 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f22:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f26:	2a21      	cmp	r2, #33	; 0x21
 8001f28:	d1f2      	bne.n	8001f10 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f2a:	68a1      	ldr	r1, [r4, #8]
 8001f2c:	6a22      	ldr	r2, [r4, #32]
 8001f2e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001f32:	d118      	bne.n	8001f66 <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f34:	8811      	ldrh	r1, [r2, #0]
 8001f36:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f3a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f3c:	6921      	ldr	r1, [r4, #16]
 8001f3e:	b981      	cbnz	r1, 8001f62 <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8001f40:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001f42:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001f44:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f46:	3a01      	subs	r2, #1
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d1df      	bne.n	8001f10 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	e7d6      	b.n	8001f10 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 8001f62:	3201      	adds	r2, #1
 8001f64:	e7ed      	b.n	8001f42 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f66:	1c51      	adds	r1, r2, #1
 8001f68:	6221      	str	r1, [r4, #32]
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	e7e9      	b.n	8001f44 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f70:	0650      	lsls	r0, r2, #25
 8001f72:	d5cd      	bpl.n	8001f10 <HAL_UART_IRQHandler+0xc0>
 8001f74:	064a      	lsls	r2, r1, #25
 8001f76:	d5cb      	bpl.n	8001f10 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f80:	2320      	movs	r3, #32
 8001f82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff ff25 	bl	8001dd6 <HAL_UART_TxCpltCallback>
 8001f8c:	e7c0      	b.n	8001f10 <HAL_UART_IRQHandler+0xc0>
 8001f8e:	bf00      	nop
 8001f90:	08001f95 	.word	0x08001f95

08001f94 <UART_DMAAbortOnError>:
{
 8001f94:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f96:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f9c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001f9e:	f7ff ff56 	bl	8001e4e <HAL_UART_ErrorCallback>
}
 8001fa2:	bd08      	pop	{r3, pc}

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa6:	2414      	movs	r4, #20
{
 8001fa8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	4622      	mov	r2, r4
 8001fac:	2100      	movs	r1, #0
 8001fae:	a808      	add	r0, sp, #32
 8001fb0:	f000 fba6 	bl	8002700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb4:	4622      	mov	r2, r4
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	a802      	add	r0, sp, #8
 8001fba:	f000 fba1 	bl	8002700 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2500      	movs	r5, #0
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <SystemClock_Config+0x90>)
 8001fc2:	9500      	str	r5, [sp, #0]
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fce:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fd8:	9501      	str	r5, [sp, #4]
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fec:	9301      	str	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fee:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ff0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff2:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ffa:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ffc:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002000:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002004:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002008:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800200a:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800200e:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002012:	f7ff f941 	bl	8001298 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002018:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800201c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002022:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002024:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002026:	e9cd 3505 	strd	r3, r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800202a:	f7ff f833 	bl	8001094 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800202e:	b015      	add	sp, #84	; 0x54
 8002030:	bd30      	pop	{r4, r5, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000

0800203c <main>:
{
 800203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002040:	b092      	sub	sp, #72	; 0x48
	sch_power_up ();
 8002042:	f7fe fabd 	bl	80005c0 <sch_power_up>
  HAL_Init();
 8002046:	f7fe fbdf 	bl	8000808 <HAL_Init>
  SystemClock_Config();
 800204a:	f7ff ffab 	bl	8001fa4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	2214      	movs	r2, #20
 8002050:	2100      	movs	r1, #0
 8002052:	a80b      	add	r0, sp, #44	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002056:	f000 fb53 	bl	8002700 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <main+0x1e8>)
 800205c:	9401      	str	r4, [sp, #4]
 800205e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_pin_Pin|Event_1_Pin|Event_2_Pin, GPIO_PIN_RESET);
 8002060:	4871      	ldr	r0, [pc, #452]	; (8002228 <main+0x1ec>)
  huart2.Instance = USART2;
 8002062:	4e72      	ldr	r6, [pc, #456]	; (800222c <main+0x1f0>)
  hadc1.Instance = ADC1;
 8002064:	4d72      	ldr	r5, [pc, #456]	; (8002230 <main+0x1f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002066:	f042 0204 	orr.w	r2, r2, #4
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
 800206c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206e:	f002 0204 	and.w	r2, r2, #4
 8002072:	9201      	str	r2, [sp, #4]
 8002074:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002076:	9402      	str	r4, [sp, #8]
 8002078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
 8002080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002082:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002086:	9202      	str	r2, [sp, #8]
 8002088:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	9403      	str	r4, [sp, #12]
 800208c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
 8002094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002096:	f002 0201 	and.w	r2, r2, #1
 800209a:	9203      	str	r2, [sp, #12]
 800209c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	9404      	str	r4, [sp, #16]
 80020a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a2:	f042 0202 	orr.w	r2, r2, #2
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, Test_pin_Pin|Event_1_Pin|Event_2_Pin, GPIO_PIN_RESET);
 80020ae:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, Test_pin_Pin|Event_1_Pin|Event_2_Pin, GPIO_PIN_RESET);
 80020b2:	f44f 71a1 	mov.w	r1, #322	; 0x142
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, Test_pin_Pin|Event_1_Pin|Event_2_Pin, GPIO_PIN_RESET);
 80020b8:	f7fe ffda 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020bc:	4622      	mov	r2, r4
 80020be:	2120      	movs	r1, #32
 80020c0:	485c      	ldr	r0, [pc, #368]	; (8002234 <main+0x1f8>)
 80020c2:	f7fe ffd5 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020c6:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <main+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020c8:	4857      	ldr	r0, [pc, #348]	; (8002228 <main+0x1ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d0:	a90b      	add	r1, sp, #44	; 0x2c

  /*Configure GPIO pins : Test_pin_Pin Event_1_Pin Event_2_Pin */
  GPIO_InitStruct.Pin = Test_pin_Pin|Event_1_Pin|Event_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020d4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f7fe feea 	bl	8000eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	f44f 73a1 	mov.w	r3, #322	; 0x142
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	a90b      	add	r1, sp, #44	; 0x2c
 80020e2:	4851      	ldr	r0, [pc, #324]	; (8002228 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f7fe fee0 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020f0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020f2:	a90b      	add	r1, sp, #44	; 0x2c
 80020f4:	484f      	ldr	r0, [pc, #316]	; (8002234 <main+0x1f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f7fe fed7 	bl	8000eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002102:	4622      	mov	r2, r4
 8002104:	4621      	mov	r1, r4
 8002106:	2028      	movs	r0, #40	; 0x28
 8002108:	f7fe fe68 	bl	8000ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800210c:	2028      	movs	r0, #40	; 0x28
 800210e:	f7fe fe99 	bl	8000e44 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 8002112:	494a      	ldr	r1, [pc, #296]	; (800223c <main+0x200>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8002114:	6134      	str	r4, [r6, #16]
  huart2.Init.BaudRate = 115200;
 8002116:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800211a:	e9c6 1300 	strd	r1, r3, [r6]
  ADC_ChannelConfTypeDef sConfig = {0};
 800211e:	f04f 0810 	mov.w	r8, #16
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002122:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002124:	4630      	mov	r0, r6
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	e9c6 3405 	strd	r3, r4, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800212a:	e9c6 4402 	strd	r4, r4, [r6, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800212e:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002130:	f7ff fda0 	bl	8001c74 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002134:	4642      	mov	r2, r8
 8002136:	4621      	mov	r1, r4
 8002138:	a80b      	add	r0, sp, #44	; 0x2c
 800213a:	f000 fae1 	bl	8002700 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800213e:	4840      	ldr	r0, [pc, #256]	; (8002240 <main+0x204>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002140:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002142:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002146:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800214a:	4b3e      	ldr	r3, [pc, #248]	; (8002244 <main+0x208>)
  hadc1.Init.ScanConvMode = DISABLE;
 800214c:	612c      	str	r4, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800214e:	4628      	mov	r0, r5
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002150:	762f      	strb	r7, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002152:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002156:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002158:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800215a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800215c:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800215e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002162:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002164:	f7fe fb7c 	bl	8000860 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <main+0x20c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800216a:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800216c:	a90b      	add	r1, sp, #44	; 0x2c
 800216e:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8002170:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002174:	f7fe fd80 	bl	8000c78 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002178:	4621      	mov	r1, r4
 800217a:	4642      	mov	r2, r8
 800217c:	a807      	add	r0, sp, #28
  htim4.Instance = TIM4;
 800217e:	4d33      	ldr	r5, [pc, #204]	; (800224c <main+0x210>)
  htim4.Init.Prescaler = 83;
 8002180:	4f33      	ldr	r7, [pc, #204]	; (8002250 <main+0x214>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f000 fabd 	bl	8002700 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002186:	221c      	movs	r2, #28
 8002188:	4621      	mov	r1, r4
 800218a:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002190:	f000 fab6 	bl	8002700 <memset>
  htim4.Init.Prescaler = 83;
 8002194:	2353      	movs	r3, #83	; 0x53
 8002196:	e9c5 7300 	strd	r7, r3, [r5]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800219a:	4628      	mov	r0, r5
  htim4.Init.Period = 10000;
 800219c:	f242 7310 	movw	r3, #10000	; 0x2710
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a0:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	61ac      	str	r4, [r5, #24]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80021a6:	f8c5 8008 	str.w	r8, [r5, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021aa:	f7ff fb17 	bl	80017dc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021b2:	a907      	add	r1, sp, #28
 80021b4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b6:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021b8:	f7ff fbb2 	bl	8001920 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80021bc:	4628      	mov	r0, r5
 80021be:	f7ff fb27 	bl	8001810 <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021c2:	a905      	add	r1, sp, #20
 80021c4:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021ca:	f7ff fc6b 	bl	8001aa4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 10;
 80021ce:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80021d2:	230a      	movs	r3, #10
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d4:	4622      	mov	r2, r4
 80021d6:	a90b      	add	r1, sp, #44	; 0x2c
 80021d8:	4628      	mov	r0, r5
  sConfigOC.Pulse = 10;
 80021da:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021de:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e0:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e2:	f7ff fb65 	bl	80018b0 <HAL_TIM_OC_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 80021e6:	4628      	mov	r0, r5
 80021e8:	f000 f8ac 	bl	8002344 <HAL_TIM_MspPostInit>
  	HAL_UART_Receive_IT(&huart2, buff, buff_size);
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <main+0x218>)
 80021ee:	491a      	ldr	r1, [pc, #104]	; (8002258 <main+0x21c>)
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	4630      	mov	r0, r6
 80021f4:	f7ff fdc8 	bl	8001d88 <HAL_UART_Receive_IT>
	sch_init ();
 80021f8:	f7fe fa24 	bl	8000644 <sch_init>
	lab1_init();
 80021fc:	f000 fa12 	bl	8002624 <lab1_init>
	uint32_t old_t = HAL_GetTick();
 8002200:	f7fe fb28 	bl	8000854 <HAL_GetTick>
 8002204:	4604      	mov	r4, r0
	while (old_t == HAL_GetTick());	// wait for sys tick to change (increment) -> then start timer
 8002206:	f7fe fb25 	bl	8000854 <HAL_GetTick>
 800220a:	42a0      	cmp	r0, r4
 800220c:	d0fb      	beq.n	8002206 <main+0x1ca>
	HAL_TIM_Base_Start(&htim4);
 800220e:	480f      	ldr	r0, [pc, #60]	; (800224c <main+0x210>)
 8002210:	f7ff fa6a 	bl	80016e8 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1 );
 8002214:	2100      	movs	r1, #0
 8002216:	480d      	ldr	r0, [pc, #52]	; (800224c <main+0x210>)
 8002218:	f7ff fc24 	bl	8001a64 <HAL_TIM_OC_Start>
	  sch_loop();
 800221c:	f7fe fa14 	bl	8000648 <sch_loop>
 8002220:	e7fc      	b.n	800221c <main+0x1e0>
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40020800 	.word	0x40020800
 800222c:	20000400 	.word	0x20000400
 8002230:	200003b8 	.word	0x200003b8
 8002234:	40020000 	.word	0x40020000
 8002238:	10210000 	.word	0x10210000
 800223c:	40004400 	.word	0x40004400
 8002240:	40012000 	.word	0x40012000
 8002244:	0f000001 	.word	0x0f000001
 8002248:	10000012 	.word	0x10000012
 800224c:	2000036c 	.word	0x2000036c
 8002250:	40000800 	.word	0x40000800
 8002254:	2000000c 	.word	0x2000000c
 8002258:	200003ac 	.word	0x200003ac

0800225c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin )
{

	if(GPIO_Pin == B1_Pin)
 800225c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002260:	d101      	bne.n	8002266 <HAL_GPIO_EXTI_Callback+0xa>
	{
		check_input_loop();
 8002262:	f000 b97b 	b.w	800255c <check_input_loop>
	}
}
 8002266:	4770      	bx	lr

08002268 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002268:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart2, buff, buff_size);		//resets receive interrupt allowing future calls
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_UART_RxCpltCallback+0x1c>)
 800226c:	4c06      	ldr	r4, [pc, #24]	; (8002288 <HAL_UART_RxCpltCallback+0x20>)
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	4806      	ldr	r0, [pc, #24]	; (800228c <HAL_UART_RxCpltCallback+0x24>)
 8002272:	4621      	mov	r1, r4
 8002274:	f7ff fd88 	bl	8001d88 <HAL_UART_Receive_IT>
	check_uart_loop(&buff);
 8002278:	4620      	mov	r0, r4
}
 800227a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	check_uart_loop(&buff);
 800227e:	f000 b98d 	b.w	800259c <check_uart_loop>
 8002282:	bf00      	nop
 8002284:	2000000c 	.word	0x2000000c
 8002288:	200003ac 	.word	0x200003ac
 800228c:	20000400 	.word	0x20000400

08002290 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	read_adc_loop();
 8002290:	f000 b9a8 	b.w	80025e4 <read_adc_loop>

08002294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_MspInit+0x38>)
 8002298:	2100      	movs	r1, #0
 800229a:	9100      	str	r1, [sp, #0]
 800229c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800229e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44
 80022a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022aa:	9200      	str	r2, [sp, #0]
 80022ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	9101      	str	r1, [sp, #4]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022c2:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c4:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022c6:	f7fe bd77 	b.w	8000db8 <HAL_NVIC_SetPriorityGrouping>
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d0:	b507      	push	{r0, r1, r2, lr}
  if(hadc->Instance==ADC1)
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_ADC_MspInit+0x40>)
 80022d4:	6802      	ldr	r2, [r0, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d116      	bne.n	8002308 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022da:	2200      	movs	r2, #0
 80022dc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80022e0:	9201      	str	r2, [sp, #4]
 80022e2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80022e4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80022e8:	6459      	str	r1, [r3, #68]	; 0x44
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	9301      	str	r3, [sp, #4]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022f2:	4611      	mov	r1, r2
 80022f4:	2012      	movs	r0, #18
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022f6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022f8:	f7fe fd70 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022fc:	2012      	movs	r0, #18
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022fe:	b003      	add	sp, #12
 8002300:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002304:	f7fe bd9e 	b.w	8000e44 <HAL_NVIC_EnableIRQ>
}
 8002308:	b003      	add	sp, #12
 800230a:	f85d fb04 	ldr.w	pc, [sp], #4
 800230e:	bf00      	nop
 8002310:	40012000 	.word	0x40012000

08002314 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8002314:	6802      	ldr	r2, [r0, #0]
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_TIM_Base_MspInit+0x28>)
 8002318:	429a      	cmp	r2, r3
{
 800231a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 800231c:	d10b      	bne.n	8002336 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_TIM_Base_MspInit+0x2c>)
 8002324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002326:	f042 0204 	orr.w	r2, r2, #4
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002336:	b002      	add	sp, #8
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40000800 	.word	0x40000800
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002344:	b510      	push	{r4, lr}
 8002346:	4604      	mov	r4, r0
 8002348:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234a:	2214      	movs	r2, #20
 800234c:	2100      	movs	r1, #0
 800234e:	a801      	add	r0, sp, #4
 8002350:	f000 f9d6 	bl	8002700 <memset>
  if(htim->Instance==TIM4)
 8002354:	6822      	ldr	r2, [r4, #0]
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_TIM_MspPostInit+0x48>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d114      	bne.n	8002386 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002366:	f042 0202 	orr.w	r2, r2, #2
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002380:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f7fe fd95 	bl	8000eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002386:	b006      	add	sp, #24
 8002388:	bd10      	pop	{r4, pc}
 800238a:	bf00      	nop
 800238c:	40000800 	.word	0x40000800
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400

08002398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002398:	b510      	push	{r4, lr}
 800239a:	4604      	mov	r4, r0
 800239c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	2214      	movs	r2, #20
 80023a0:	2100      	movs	r1, #0
 80023a2:	a803      	add	r0, sp, #12
 80023a4:	f000 f9ac 	bl	8002700 <memset>
  if(huart->Instance==USART2)
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_UART_MspInit+0x74>)
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d12a      	bne.n	8002406 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023b0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80023b4:	2400      	movs	r4, #0
 80023b6:	9401      	str	r4, [sp, #4]
 80023b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80023bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
 80023c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80023c8:	9201      	str	r2, [sp, #4]
 80023ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	9402      	str	r4, [sp, #8]
 80023ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023e8:	2103      	movs	r1, #3
 80023ea:	2307      	movs	r3, #7
 80023ec:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	a903      	add	r1, sp, #12
 80023f2:	f7fe fd5d 	bl	8000eb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023f6:	2026      	movs	r0, #38	; 0x26
 80023f8:	4622      	mov	r2, r4
 80023fa:	4621      	mov	r1, r4
 80023fc:	f7fe fcee 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002400:	2026      	movs	r0, #38	; 0x26
 8002402:	f7fe fd1f 	bl	8000e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002406:	b008      	add	sp, #32
 8002408:	bd10      	pop	{r4, pc}
 800240a:	bf00      	nop
 800240c:	40004400 	.word	0x40004400
 8002410:	40020000 	.word	0x40020000

08002414 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002414:	4770      	bx	lr

08002416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	e7fe      	b.n	800241a <BusFault_Handler>

0800241c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler>

0800241e <SVC_Handler>:
 800241e:	4770      	bx	lr

08002420 <DebugMon_Handler>:
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:
 8002422:	4770      	bx	lr

08002424 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002424:	f7fe ba0a 	b.w	800083c <HAL_IncTick>

08002428 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002428:	4801      	ldr	r0, [pc, #4]	; (8002430 <ADC_IRQHandler+0x8>)
 800242a:	f7fe bb90 	b.w	8000b4e <HAL_ADC_IRQHandler>
 800242e:	bf00      	nop
 8002430:	200003b8 	.word	0x200003b8

08002434 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002434:	4801      	ldr	r0, [pc, #4]	; (800243c <USART2_IRQHandler+0x8>)
 8002436:	f7ff bd0b 	b.w	8001e50 <HAL_UART_IRQHandler>
 800243a:	bf00      	nop
 800243c:	20000400 	.word	0x20000400

08002440 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002440:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002444:	f7fe be1a 	b.w	800107c <HAL_GPIO_EXTI_IRQHandler>

08002448 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002448:	490f      	ldr	r1, [pc, #60]	; (8002488 <SystemInit+0x40>)
 800244a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800244e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <SystemInit+0x44>)
 8002458:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800245a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002462:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800246a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800246e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <SystemInit+0x48>)
 8002472:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800247a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800247c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800247e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002482:	608b      	str	r3, [r1, #8]
#endif
}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00
 800248c:	40023800 	.word	0x40023800
 8002490:	24003010 	.word	0x24003010

08002494 <timer_cb_test1>:
}



void timer_cb_test1(uint8_t *x)
{
 8002494:	b538      	push	{r3, r4, r5, lr}
	end = rtc_get_ticks();
 8002496:	f7fe f9dd 	bl	8000854 <HAL_GetTick>
 800249a:	4d0f      	ldr	r5, [pc, #60]	; (80024d8 <timer_cb_test1+0x44>)
	HAL_GPIO_WritePin(LED_G_PORT,LED_G_PIN, 1); //Toggle LED
	sch_create_timeout(rtc_get_ticks()+1000, timer_cb_test2, 0, str_LED_BLINK_2);
	real = end - start;
 800249c:	4c0f      	ldr	r4, [pc, #60]	; (80024dc <timer_cb_test1+0x48>)
	end = rtc_get_ticks();
 800249e:	6028      	str	r0, [r5, #0]
	HAL_GPIO_WritePin(LED_G_PORT,LED_G_PIN, 1); //Toggle LED
 80024a0:	2201      	movs	r2, #1
 80024a2:	2120      	movs	r1, #32
 80024a4:	480e      	ldr	r0, [pc, #56]	; (80024e0 <timer_cb_test1+0x4c>)
 80024a6:	f7fe fde3 	bl	8001070 <HAL_GPIO_WritePin>
	sch_create_timeout(rtc_get_ticks()+1000, timer_cb_test2, 0, str_LED_BLINK_2);
 80024aa:	f7fe f9d3 	bl	8000854 <HAL_GetTick>
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <timer_cb_test1+0x50>)
 80024b0:	490d      	ldr	r1, [pc, #52]	; (80024e8 <timer_cb_test1+0x54>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80024b8:	f7fe f92e 	bl	8000718 <sch_create_timeout>
	real = end - start;
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	682a      	ldr	r2, [r5, #0]
	sprintf(str, "D=%d us\n", real);
 80024c0:	490a      	ldr	r1, [pc, #40]	; (80024ec <timer_cb_test1+0x58>)
 80024c2:	480b      	ldr	r0, [pc, #44]	; (80024f0 <timer_cb_test1+0x5c>)
	real = end - start;
 80024c4:	1ad2      	subs	r2, r2, r3
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <timer_cb_test1+0x60>)
 80024c8:	601a      	str	r2, [r3, #0]
	sprintf(str, "D=%d us\n", real);
 80024ca:	f000 f939 	bl	8002740 <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen((char*)str),30);

	start = rtc_get_ticks();
 80024ce:	f7fe f9c1 	bl	8000854 <HAL_GetTick>
 80024d2:	6020      	str	r0, [r4, #0]
}
 80024d4:	bd38      	pop	{r3, r4, r5, pc}
 80024d6:	bf00      	nop
 80024d8:	20000444 	.word	0x20000444
 80024dc:	20000460 	.word	0x20000460
 80024e0:	40020000 	.word	0x40020000
 80024e4:	2000007f 	.word	0x2000007f
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	08003957 	.word	0x08003957
 80024f0:	2000044c 	.word	0x2000044c
 80024f4:	20000448 	.word	0x20000448

080024f8 <timer_cb_test2>:
void timer_cb_test2(uint8_t *x)
{
 80024f8:	b538      	push	{r3, r4, r5, lr}
	end = rtc_get_ticks();
 80024fa:	f7fe f9ab 	bl	8000854 <HAL_GetTick>
 80024fe:	4d0f      	ldr	r5, [pc, #60]	; (800253c <timer_cb_test2+0x44>)
	HAL_GPIO_WritePin(LED_G_PORT, LED_G_PIN, 0); //Toggle LED
	sch_create_timeout(rtc_get_ticks()+1000, timer_cb_test1, 0, str_LED_BLINK_1);

	real = end - start;
 8002500:	4c0f      	ldr	r4, [pc, #60]	; (8002540 <timer_cb_test2+0x48>)
	end = rtc_get_ticks();
 8002502:	6028      	str	r0, [r5, #0]
	HAL_GPIO_WritePin(LED_G_PORT, LED_G_PIN, 0); //Toggle LED
 8002504:	2200      	movs	r2, #0
 8002506:	2120      	movs	r1, #32
 8002508:	480e      	ldr	r0, [pc, #56]	; (8002544 <timer_cb_test2+0x4c>)
 800250a:	f7fe fdb1 	bl	8001070 <HAL_GPIO_WritePin>
	sch_create_timeout(rtc_get_ticks()+1000, timer_cb_test1, 0, str_LED_BLINK_1);
 800250e:	f7fe f9a1 	bl	8000854 <HAL_GetTick>
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <timer_cb_test2+0x50>)
 8002514:	490d      	ldr	r1, [pc, #52]	; (800254c <timer_cb_test2+0x54>)
 8002516:	2200      	movs	r2, #0
 8002518:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800251c:	f7fe f8fc 	bl	8000718 <sch_create_timeout>
	real = end - start;
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	682a      	ldr	r2, [r5, #0]
		sprintf(str, "D=%d us\n", real);
 8002524:	490a      	ldr	r1, [pc, #40]	; (8002550 <timer_cb_test2+0x58>)
 8002526:	480b      	ldr	r0, [pc, #44]	; (8002554 <timer_cb_test2+0x5c>)
	real = end - start;
 8002528:	1ad2      	subs	r2, r2, r3
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <timer_cb_test2+0x60>)
 800252c:	601a      	str	r2, [r3, #0]
		sprintf(str, "D=%d us\n", real);
 800252e:	f000 f907 	bl	8002740 <siprintf>
	//	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen((char*)str),30);

	start = rtc_get_ticks();
 8002532:	f7fe f98f 	bl	8000854 <HAL_GetTick>
 8002536:	6020      	str	r0, [r4, #0]
}
 8002538:	bd38      	pop	{r3, r4, r5, pc}
 800253a:	bf00      	nop
 800253c:	20000444 	.word	0x20000444
 8002540:	20000460 	.word	0x20000460
 8002544:	40020000 	.word	0x40020000
 8002548:	2000007a 	.word	0x2000007a
 800254c:	08002495 	.word	0x08002495
 8002550:	08003957 	.word	0x08003957
 8002554:	2000044c 	.word	0x2000044c
 8002558:	20000448 	.word	0x20000448

0800255c <check_input_loop>:
uint8_t msg_help[] = "This code monitors for blue/user button trigger, and reads ADC1 when asked with letter 't'";



void check_input_loop()
{
 800255c:	b508      	push	{r3, lr}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800255e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002562:	480a      	ldr	r0, [pc, #40]	; (800258c <check_input_loop+0x30>)
 8002564:	f7fe fd7e 	bl	8001064 <HAL_GPIO_ReadPin>
 8002568:	b970      	cbnz	r0, 8002588 <check_input_loop+0x2c>
	{
		if (HAL_OK != HAL_UART_Transmit(&huart2, msg1, strlen((char*)msg1), 5) )
 800256a:	4809      	ldr	r0, [pc, #36]	; (8002590 <check_input_loop+0x34>)
 800256c:	f7fd fe50 	bl	8000210 <strlen>
 8002570:	2305      	movs	r3, #5
 8002572:	b282      	uxth	r2, r0
 8002574:	4906      	ldr	r1, [pc, #24]	; (8002590 <check_input_loop+0x34>)
 8002576:	4807      	ldr	r0, [pc, #28]	; (8002594 <check_input_loop+0x38>)
 8002578:	f7ff fbaa 	bl	8001cd0 <HAL_UART_Transmit>
 800257c:	b120      	cbz	r0, 8002588 <check_input_loop+0x2c>
			printf("Debug error while UART Tx");
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <check_input_loop+0x3c>)
		// 5 ticks ~= 5ms
	}
}
 8002580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			printf("Debug error while UART Tx");
 8002584:	f000 b8c4 	b.w	8002710 <iprintf>
}
 8002588:	bd08      	pop	{r3, pc}
 800258a:	bf00      	nop
 800258c:	40020800 	.word	0x40020800
 8002590:	20000014 	.word	0x20000014
 8002594:	20000400 	.word	0x20000400
 8002598:	08003938 	.word	0x08003938

0800259c <check_uart_loop>:

//uint8_t buf[10];
uint16_t buf_len = 1; // reading one char at a time
void check_uart_loop(uint8_t *buf)
{
 800259c:	b510      	push	{r4, lr}
	//if (HAL_OK == HAL_UART_Receive(&huart2, buf, buf_len, 0))
	//{
		// receive successful a byte
		if ((buf[0]=='t')||(buf[0] == 'T'))
 800259e:	7803      	ldrb	r3, [r0, #0]
 80025a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80025a4:	2b54      	cmp	r3, #84	; 0x54
{
 80025a6:	4604      	mov	r4, r0
		if ((buf[0]=='t')||(buf[0] == 'T'))
 80025a8:	d102      	bne.n	80025b0 <check_uart_loop+0x14>
		{
			// Start temperature reading from ADC
			HAL_ADC_Start_IT(&hadc1);	//enables adc1 interrupt/starts callback function allowing adc_loop to be executed
 80025aa:	480b      	ldr	r0, [pc, #44]	; (80025d8 <check_uart_loop+0x3c>)
 80025ac:	f7fe fa4e 	bl	8000a4c <HAL_ADC_Start_IT>
		}
		if ((buf[0]=='h')||(buf[0]=='H')||(buf[0] == '?'))
 80025b0:	7823      	ldrb	r3, [r4, #0]
 80025b2:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80025b6:	2a48      	cmp	r2, #72	; 0x48
 80025b8:	d001      	beq.n	80025be <check_uart_loop+0x22>
 80025ba:	2b3f      	cmp	r3, #63	; 0x3f
 80025bc:	d10a      	bne.n	80025d4 <check_uart_loop+0x38>
		{
			// Start temperature reading from ADC
			HAL_UART_Transmit(&huart2, msg_help, strlen((char*)msg_help),10);
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <check_uart_loop+0x40>)
 80025c0:	f7fd fe26 	bl	8000210 <strlen>
 80025c4:	230a      	movs	r3, #10
 80025c6:	b282      	uxth	r2, r0
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <check_uart_loop+0x40>)
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <check_uart_loop+0x44>)
		}
	//}
}
 80025cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_UART_Transmit(&huart2, msg_help, strlen((char*)msg_help),10);
 80025d0:	f7ff bb7e 	b.w	8001cd0 <HAL_UART_Transmit>
}
 80025d4:	bd10      	pop	{r4, pc}
 80025d6:	bf00      	nop
 80025d8:	200003b8 	.word	0x200003b8
 80025dc:	2000001f 	.word	0x2000001f
 80025e0:	20000400 	.word	0x20000400

080025e4 <read_adc_loop>:


void read_adc_loop()
{
 80025e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (HAL_OK == HAL_ADC_PollForConversion(&hadc1, 0))
 80025e6:	2100      	movs	r1, #0
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <read_adc_loop+0x34>)
 80025ea:	f7fe f9df 	bl	80009ac <HAL_ADC_PollForConversion>
 80025ee:	b980      	cbnz	r0, 8002612 <read_adc_loop+0x2e>
	{
		// ADC ready
		char temp_str[15];
		uint32_t temp = HAL_ADC_GetValue(&hadc1);
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <read_adc_loop+0x34>)
 80025f2:	f7fe faa7 	bl	8000b44 <HAL_ADC_GetValue>
		sprintf(temp_str, "T=%d", (int)temp);
 80025f6:	4909      	ldr	r1, [pc, #36]	; (800261c <read_adc_loop+0x38>)
 80025f8:	4602      	mov	r2, r0
 80025fa:	4668      	mov	r0, sp
 80025fc:	f000 f8a0 	bl	8002740 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temp_str, strlen(temp_str),5);
 8002600:	4668      	mov	r0, sp
 8002602:	f7fd fe05 	bl	8000210 <strlen>
 8002606:	2305      	movs	r3, #5
 8002608:	b282      	uxth	r2, r0
 800260a:	4669      	mov	r1, sp
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <read_adc_loop+0x3c>)
 800260e:	f7ff fb5f 	bl	8001cd0 <HAL_UART_Transmit>
	}
}
 8002612:	b005      	add	sp, #20
 8002614:	f85d fb04 	ldr.w	pc, [sp], #4
 8002618:	200003b8 	.word	0x200003b8
 800261c:	08003952 	.word	0x08003952
 8002620:	20000400 	.word	0x20000400

08002624 <lab1_init>:
{
 8002624:	b508      	push	{r3, lr}
	timer_cb_test1(NULL);
 8002626:	2000      	movs	r0, #0
 8002628:	f7ff ff34 	bl	8002494 <timer_cb_test1>
	adc_loop_id = sch_add_loop(read_adc_loop);
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <lab1_init+0x28>)
 800262e:	f7fe f843 	bl	80006b8 <sch_add_loop>
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <lab1_init+0x2c>)
 8002634:	7018      	strb	r0, [r3, #0]
	uart_loop_id = sch_add_loop(check_uart_loop);
 8002636:	4807      	ldr	r0, [pc, #28]	; (8002654 <lab1_init+0x30>)
 8002638:	f7fe f83e 	bl	80006b8 <sch_add_loop>
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <lab1_init+0x34>)
 800263e:	7018      	strb	r0, [r3, #0]
	input_loop_id = sch_add_loop(check_input_loop);
 8002640:	4806      	ldr	r0, [pc, #24]	; (800265c <lab1_init+0x38>)
 8002642:	f7fe f839 	bl	80006b8 <sch_add_loop>
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <lab1_init+0x3c>)
 8002648:	7018      	strb	r0, [r3, #0]
}
 800264a:	bd08      	pop	{r3, pc}
 800264c:	080025e5 	.word	0x080025e5
 8002650:	20000464 	.word	0x20000464
 8002654:	0800259d 	.word	0x0800259d
 8002658:	20000441 	.word	0x20000441
 800265c:	0800255d 	.word	0x0800255d
 8002660:	20000440 	.word	0x20000440

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800269c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800266a:	e003      	b.n	8002674 <LoopCopyDataInit>

0800266c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800266e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002672:	3104      	adds	r1, #4

08002674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002674:	480b      	ldr	r0, [pc, #44]	; (80026a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800267a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800267c:	d3f6      	bcc.n	800266c <CopyDataInit>
  ldr  r2, =_sbss
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002680:	e002      	b.n	8002688 <LoopFillZerobss>

08002682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002684:	f842 3b04 	str.w	r3, [r2], #4

08002688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800268a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800268c:	d3f9      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800268e:	f7ff fedb 	bl	8002448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f000 f811 	bl	80026b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7ff fcd1 	bl	800203c <main>
  bx  lr    
 800269a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800269c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026a0:	08003a08 	.word	0x08003a08
  ldr  r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026a8:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 80026ac:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 80026b0:	2000046c 	.word	0x2000046c

080026b4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <CAN1_RX0_IRQHandler>
	...

080026b8 <__libc_init_array>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	4e0d      	ldr	r6, [pc, #52]	; (80026f0 <__libc_init_array+0x38>)
 80026bc:	4c0d      	ldr	r4, [pc, #52]	; (80026f4 <__libc_init_array+0x3c>)
 80026be:	1ba4      	subs	r4, r4, r6
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	2500      	movs	r5, #0
 80026c4:	42a5      	cmp	r5, r4
 80026c6:	d109      	bne.n	80026dc <__libc_init_array+0x24>
 80026c8:	4e0b      	ldr	r6, [pc, #44]	; (80026f8 <__libc_init_array+0x40>)
 80026ca:	4c0c      	ldr	r4, [pc, #48]	; (80026fc <__libc_init_array+0x44>)
 80026cc:	f001 f906 	bl	80038dc <_init>
 80026d0:	1ba4      	subs	r4, r4, r6
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	2500      	movs	r5, #0
 80026d6:	42a5      	cmp	r5, r4
 80026d8:	d105      	bne.n	80026e6 <__libc_init_array+0x2e>
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026e0:	4798      	blx	r3
 80026e2:	3501      	adds	r5, #1
 80026e4:	e7ee      	b.n	80026c4 <__libc_init_array+0xc>
 80026e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ea:	4798      	blx	r3
 80026ec:	3501      	adds	r5, #1
 80026ee:	e7f2      	b.n	80026d6 <__libc_init_array+0x1e>
 80026f0:	08003a00 	.word	0x08003a00
 80026f4:	08003a00 	.word	0x08003a00
 80026f8:	08003a00 	.word	0x08003a00
 80026fc:	08003a04 	.word	0x08003a04

08002700 <memset>:
 8002700:	4402      	add	r2, r0
 8002702:	4603      	mov	r3, r0
 8002704:	4293      	cmp	r3, r2
 8002706:	d100      	bne.n	800270a <memset+0xa>
 8002708:	4770      	bx	lr
 800270a:	f803 1b01 	strb.w	r1, [r3], #1
 800270e:	e7f9      	b.n	8002704 <memset+0x4>

08002710 <iprintf>:
 8002710:	b40f      	push	{r0, r1, r2, r3}
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <iprintf+0x2c>)
 8002714:	b513      	push	{r0, r1, r4, lr}
 8002716:	681c      	ldr	r4, [r3, #0]
 8002718:	b124      	cbz	r4, 8002724 <iprintf+0x14>
 800271a:	69a3      	ldr	r3, [r4, #24]
 800271c:	b913      	cbnz	r3, 8002724 <iprintf+0x14>
 800271e:	4620      	mov	r0, r4
 8002720:	f000 f9de 	bl	8002ae0 <__sinit>
 8002724:	ab05      	add	r3, sp, #20
 8002726:	9a04      	ldr	r2, [sp, #16]
 8002728:	68a1      	ldr	r1, [r4, #8]
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	4620      	mov	r0, r4
 800272e:	f000 fce9 	bl	8003104 <_vfiprintf_r>
 8002732:	b002      	add	sp, #8
 8002734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002738:	b004      	add	sp, #16
 800273a:	4770      	bx	lr
 800273c:	20000084 	.word	0x20000084

08002740 <siprintf>:
 8002740:	b40e      	push	{r1, r2, r3}
 8002742:	b500      	push	{lr}
 8002744:	b09c      	sub	sp, #112	; 0x70
 8002746:	ab1d      	add	r3, sp, #116	; 0x74
 8002748:	9002      	str	r0, [sp, #8]
 800274a:	9006      	str	r0, [sp, #24]
 800274c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002750:	4809      	ldr	r0, [pc, #36]	; (8002778 <siprintf+0x38>)
 8002752:	9107      	str	r1, [sp, #28]
 8002754:	9104      	str	r1, [sp, #16]
 8002756:	4909      	ldr	r1, [pc, #36]	; (800277c <siprintf+0x3c>)
 8002758:	f853 2b04 	ldr.w	r2, [r3], #4
 800275c:	9105      	str	r1, [sp, #20]
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	a902      	add	r1, sp, #8
 8002764:	f000 fbac 	bl	8002ec0 <_svfiprintf_r>
 8002768:	9b02      	ldr	r3, [sp, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	b01c      	add	sp, #112	; 0x70
 8002770:	f85d eb04 	ldr.w	lr, [sp], #4
 8002774:	b003      	add	sp, #12
 8002776:	4770      	bx	lr
 8002778:	20000084 	.word	0x20000084
 800277c:	ffff0208 	.word	0xffff0208

08002780 <__swbuf_r>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	460e      	mov	r6, r1
 8002784:	4614      	mov	r4, r2
 8002786:	4605      	mov	r5, r0
 8002788:	b118      	cbz	r0, 8002792 <__swbuf_r+0x12>
 800278a:	6983      	ldr	r3, [r0, #24]
 800278c:	b90b      	cbnz	r3, 8002792 <__swbuf_r+0x12>
 800278e:	f000 f9a7 	bl	8002ae0 <__sinit>
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <__swbuf_r+0x98>)
 8002794:	429c      	cmp	r4, r3
 8002796:	d12a      	bne.n	80027ee <__swbuf_r+0x6e>
 8002798:	686c      	ldr	r4, [r5, #4]
 800279a:	69a3      	ldr	r3, [r4, #24]
 800279c:	60a3      	str	r3, [r4, #8]
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	071a      	lsls	r2, r3, #28
 80027a2:	d52e      	bpl.n	8002802 <__swbuf_r+0x82>
 80027a4:	6923      	ldr	r3, [r4, #16]
 80027a6:	b363      	cbz	r3, 8002802 <__swbuf_r+0x82>
 80027a8:	6923      	ldr	r3, [r4, #16]
 80027aa:	6820      	ldr	r0, [r4, #0]
 80027ac:	1ac0      	subs	r0, r0, r3
 80027ae:	6963      	ldr	r3, [r4, #20]
 80027b0:	b2f6      	uxtb	r6, r6
 80027b2:	4283      	cmp	r3, r0
 80027b4:	4637      	mov	r7, r6
 80027b6:	dc04      	bgt.n	80027c2 <__swbuf_r+0x42>
 80027b8:	4621      	mov	r1, r4
 80027ba:	4628      	mov	r0, r5
 80027bc:	f000 f926 	bl	8002a0c <_fflush_r>
 80027c0:	bb28      	cbnz	r0, 800280e <__swbuf_r+0x8e>
 80027c2:	68a3      	ldr	r3, [r4, #8]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60a3      	str	r3, [r4, #8]
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	6022      	str	r2, [r4, #0]
 80027ce:	701e      	strb	r6, [r3, #0]
 80027d0:	6963      	ldr	r3, [r4, #20]
 80027d2:	3001      	adds	r0, #1
 80027d4:	4283      	cmp	r3, r0
 80027d6:	d004      	beq.n	80027e2 <__swbuf_r+0x62>
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	07db      	lsls	r3, r3, #31
 80027dc:	d519      	bpl.n	8002812 <__swbuf_r+0x92>
 80027de:	2e0a      	cmp	r6, #10
 80027e0:	d117      	bne.n	8002812 <__swbuf_r+0x92>
 80027e2:	4621      	mov	r1, r4
 80027e4:	4628      	mov	r0, r5
 80027e6:	f000 f911 	bl	8002a0c <_fflush_r>
 80027ea:	b190      	cbz	r0, 8002812 <__swbuf_r+0x92>
 80027ec:	e00f      	b.n	800280e <__swbuf_r+0x8e>
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <__swbuf_r+0x9c>)
 80027f0:	429c      	cmp	r4, r3
 80027f2:	d101      	bne.n	80027f8 <__swbuf_r+0x78>
 80027f4:	68ac      	ldr	r4, [r5, #8]
 80027f6:	e7d0      	b.n	800279a <__swbuf_r+0x1a>
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <__swbuf_r+0xa0>)
 80027fa:	429c      	cmp	r4, r3
 80027fc:	bf08      	it	eq
 80027fe:	68ec      	ldreq	r4, [r5, #12]
 8002800:	e7cb      	b.n	800279a <__swbuf_r+0x1a>
 8002802:	4621      	mov	r1, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 f80d 	bl	8002824 <__swsetup_r>
 800280a:	2800      	cmp	r0, #0
 800280c:	d0cc      	beq.n	80027a8 <__swbuf_r+0x28>
 800280e:	f04f 37ff 	mov.w	r7, #4294967295
 8002812:	4638      	mov	r0, r7
 8002814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002816:	bf00      	nop
 8002818:	08003984 	.word	0x08003984
 800281c:	080039a4 	.word	0x080039a4
 8002820:	08003964 	.word	0x08003964

08002824 <__swsetup_r>:
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <__swsetup_r+0xcc>)
 8002826:	b570      	push	{r4, r5, r6, lr}
 8002828:	681d      	ldr	r5, [r3, #0]
 800282a:	4606      	mov	r6, r0
 800282c:	460c      	mov	r4, r1
 800282e:	b125      	cbz	r5, 800283a <__swsetup_r+0x16>
 8002830:	69ab      	ldr	r3, [r5, #24]
 8002832:	b913      	cbnz	r3, 800283a <__swsetup_r+0x16>
 8002834:	4628      	mov	r0, r5
 8002836:	f000 f953 	bl	8002ae0 <__sinit>
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <__swsetup_r+0xd0>)
 800283c:	429c      	cmp	r4, r3
 800283e:	d10f      	bne.n	8002860 <__swsetup_r+0x3c>
 8002840:	686c      	ldr	r4, [r5, #4]
 8002842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002846:	b29a      	uxth	r2, r3
 8002848:	0715      	lsls	r5, r2, #28
 800284a:	d42c      	bmi.n	80028a6 <__swsetup_r+0x82>
 800284c:	06d0      	lsls	r0, r2, #27
 800284e:	d411      	bmi.n	8002874 <__swsetup_r+0x50>
 8002850:	2209      	movs	r2, #9
 8002852:	6032      	str	r2, [r6, #0]
 8002854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002858:	81a3      	strh	r3, [r4, #12]
 800285a:	f04f 30ff 	mov.w	r0, #4294967295
 800285e:	e03e      	b.n	80028de <__swsetup_r+0xba>
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <__swsetup_r+0xd4>)
 8002862:	429c      	cmp	r4, r3
 8002864:	d101      	bne.n	800286a <__swsetup_r+0x46>
 8002866:	68ac      	ldr	r4, [r5, #8]
 8002868:	e7eb      	b.n	8002842 <__swsetup_r+0x1e>
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <__swsetup_r+0xd8>)
 800286c:	429c      	cmp	r4, r3
 800286e:	bf08      	it	eq
 8002870:	68ec      	ldreq	r4, [r5, #12]
 8002872:	e7e6      	b.n	8002842 <__swsetup_r+0x1e>
 8002874:	0751      	lsls	r1, r2, #29
 8002876:	d512      	bpl.n	800289e <__swsetup_r+0x7a>
 8002878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800287a:	b141      	cbz	r1, 800288e <__swsetup_r+0x6a>
 800287c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002880:	4299      	cmp	r1, r3
 8002882:	d002      	beq.n	800288a <__swsetup_r+0x66>
 8002884:	4630      	mov	r0, r6
 8002886:	f000 fa19 	bl	8002cbc <_free_r>
 800288a:	2300      	movs	r3, #0
 800288c:	6363      	str	r3, [r4, #52]	; 0x34
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002894:	81a3      	strh	r3, [r4, #12]
 8002896:	2300      	movs	r3, #0
 8002898:	6063      	str	r3, [r4, #4]
 800289a:	6923      	ldr	r3, [r4, #16]
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	81a3      	strh	r3, [r4, #12]
 80028a6:	6923      	ldr	r3, [r4, #16]
 80028a8:	b94b      	cbnz	r3, 80028be <__swsetup_r+0x9a>
 80028aa:	89a3      	ldrh	r3, [r4, #12]
 80028ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b4:	d003      	beq.n	80028be <__swsetup_r+0x9a>
 80028b6:	4621      	mov	r1, r4
 80028b8:	4630      	mov	r0, r6
 80028ba:	f000 f9bf 	bl	8002c3c <__smakebuf_r>
 80028be:	89a2      	ldrh	r2, [r4, #12]
 80028c0:	f012 0301 	ands.w	r3, r2, #1
 80028c4:	d00c      	beq.n	80028e0 <__swsetup_r+0xbc>
 80028c6:	2300      	movs	r3, #0
 80028c8:	60a3      	str	r3, [r4, #8]
 80028ca:	6963      	ldr	r3, [r4, #20]
 80028cc:	425b      	negs	r3, r3
 80028ce:	61a3      	str	r3, [r4, #24]
 80028d0:	6923      	ldr	r3, [r4, #16]
 80028d2:	b953      	cbnz	r3, 80028ea <__swsetup_r+0xc6>
 80028d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80028dc:	d1ba      	bne.n	8002854 <__swsetup_r+0x30>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	0792      	lsls	r2, r2, #30
 80028e2:	bf58      	it	pl
 80028e4:	6963      	ldrpl	r3, [r4, #20]
 80028e6:	60a3      	str	r3, [r4, #8]
 80028e8:	e7f2      	b.n	80028d0 <__swsetup_r+0xac>
 80028ea:	2000      	movs	r0, #0
 80028ec:	e7f7      	b.n	80028de <__swsetup_r+0xba>
 80028ee:	bf00      	nop
 80028f0:	20000084 	.word	0x20000084
 80028f4:	08003984 	.word	0x08003984
 80028f8:	080039a4 	.word	0x080039a4
 80028fc:	08003964 	.word	0x08003964

08002900 <__sflush_r>:
 8002900:	898a      	ldrh	r2, [r1, #12]
 8002902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002906:	4605      	mov	r5, r0
 8002908:	0710      	lsls	r0, r2, #28
 800290a:	460c      	mov	r4, r1
 800290c:	d458      	bmi.n	80029c0 <__sflush_r+0xc0>
 800290e:	684b      	ldr	r3, [r1, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	dc05      	bgt.n	8002920 <__sflush_r+0x20>
 8002914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	dc02      	bgt.n	8002920 <__sflush_r+0x20>
 800291a:	2000      	movs	r0, #0
 800291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002922:	2e00      	cmp	r6, #0
 8002924:	d0f9      	beq.n	800291a <__sflush_r+0x1a>
 8002926:	2300      	movs	r3, #0
 8002928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800292c:	682f      	ldr	r7, [r5, #0]
 800292e:	6a21      	ldr	r1, [r4, #32]
 8002930:	602b      	str	r3, [r5, #0]
 8002932:	d032      	beq.n	800299a <__sflush_r+0x9a>
 8002934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	075a      	lsls	r2, r3, #29
 800293a:	d505      	bpl.n	8002948 <__sflush_r+0x48>
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	1ac0      	subs	r0, r0, r3
 8002940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002942:	b10b      	cbz	r3, 8002948 <__sflush_r+0x48>
 8002944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002946:	1ac0      	subs	r0, r0, r3
 8002948:	2300      	movs	r3, #0
 800294a:	4602      	mov	r2, r0
 800294c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800294e:	6a21      	ldr	r1, [r4, #32]
 8002950:	4628      	mov	r0, r5
 8002952:	47b0      	blx	r6
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	89a3      	ldrh	r3, [r4, #12]
 8002958:	d106      	bne.n	8002968 <__sflush_r+0x68>
 800295a:	6829      	ldr	r1, [r5, #0]
 800295c:	291d      	cmp	r1, #29
 800295e:	d848      	bhi.n	80029f2 <__sflush_r+0xf2>
 8002960:	4a29      	ldr	r2, [pc, #164]	; (8002a08 <__sflush_r+0x108>)
 8002962:	40ca      	lsrs	r2, r1
 8002964:	07d6      	lsls	r6, r2, #31
 8002966:	d544      	bpl.n	80029f2 <__sflush_r+0xf2>
 8002968:	2200      	movs	r2, #0
 800296a:	6062      	str	r2, [r4, #4]
 800296c:	04d9      	lsls	r1, r3, #19
 800296e:	6922      	ldr	r2, [r4, #16]
 8002970:	6022      	str	r2, [r4, #0]
 8002972:	d504      	bpl.n	800297e <__sflush_r+0x7e>
 8002974:	1c42      	adds	r2, r0, #1
 8002976:	d101      	bne.n	800297c <__sflush_r+0x7c>
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	b903      	cbnz	r3, 800297e <__sflush_r+0x7e>
 800297c:	6560      	str	r0, [r4, #84]	; 0x54
 800297e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002980:	602f      	str	r7, [r5, #0]
 8002982:	2900      	cmp	r1, #0
 8002984:	d0c9      	beq.n	800291a <__sflush_r+0x1a>
 8002986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800298a:	4299      	cmp	r1, r3
 800298c:	d002      	beq.n	8002994 <__sflush_r+0x94>
 800298e:	4628      	mov	r0, r5
 8002990:	f000 f994 	bl	8002cbc <_free_r>
 8002994:	2000      	movs	r0, #0
 8002996:	6360      	str	r0, [r4, #52]	; 0x34
 8002998:	e7c0      	b.n	800291c <__sflush_r+0x1c>
 800299a:	2301      	movs	r3, #1
 800299c:	4628      	mov	r0, r5
 800299e:	47b0      	blx	r6
 80029a0:	1c41      	adds	r1, r0, #1
 80029a2:	d1c8      	bne.n	8002936 <__sflush_r+0x36>
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0c5      	beq.n	8002936 <__sflush_r+0x36>
 80029aa:	2b1d      	cmp	r3, #29
 80029ac:	d001      	beq.n	80029b2 <__sflush_r+0xb2>
 80029ae:	2b16      	cmp	r3, #22
 80029b0:	d101      	bne.n	80029b6 <__sflush_r+0xb6>
 80029b2:	602f      	str	r7, [r5, #0]
 80029b4:	e7b1      	b.n	800291a <__sflush_r+0x1a>
 80029b6:	89a3      	ldrh	r3, [r4, #12]
 80029b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029bc:	81a3      	strh	r3, [r4, #12]
 80029be:	e7ad      	b.n	800291c <__sflush_r+0x1c>
 80029c0:	690f      	ldr	r7, [r1, #16]
 80029c2:	2f00      	cmp	r7, #0
 80029c4:	d0a9      	beq.n	800291a <__sflush_r+0x1a>
 80029c6:	0793      	lsls	r3, r2, #30
 80029c8:	680e      	ldr	r6, [r1, #0]
 80029ca:	bf08      	it	eq
 80029cc:	694b      	ldreq	r3, [r1, #20]
 80029ce:	600f      	str	r7, [r1, #0]
 80029d0:	bf18      	it	ne
 80029d2:	2300      	movne	r3, #0
 80029d4:	eba6 0807 	sub.w	r8, r6, r7
 80029d8:	608b      	str	r3, [r1, #8]
 80029da:	f1b8 0f00 	cmp.w	r8, #0
 80029de:	dd9c      	ble.n	800291a <__sflush_r+0x1a>
 80029e0:	4643      	mov	r3, r8
 80029e2:	463a      	mov	r2, r7
 80029e4:	6a21      	ldr	r1, [r4, #32]
 80029e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029e8:	4628      	mov	r0, r5
 80029ea:	47b0      	blx	r6
 80029ec:	2800      	cmp	r0, #0
 80029ee:	dc06      	bgt.n	80029fe <__sflush_r+0xfe>
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f6:	81a3      	strh	r3, [r4, #12]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	e78e      	b.n	800291c <__sflush_r+0x1c>
 80029fe:	4407      	add	r7, r0
 8002a00:	eba8 0800 	sub.w	r8, r8, r0
 8002a04:	e7e9      	b.n	80029da <__sflush_r+0xda>
 8002a06:	bf00      	nop
 8002a08:	20400001 	.word	0x20400001

08002a0c <_fflush_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	690b      	ldr	r3, [r1, #16]
 8002a10:	4605      	mov	r5, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	b1db      	cbz	r3, 8002a4e <_fflush_r+0x42>
 8002a16:	b118      	cbz	r0, 8002a20 <_fflush_r+0x14>
 8002a18:	6983      	ldr	r3, [r0, #24]
 8002a1a:	b90b      	cbnz	r3, 8002a20 <_fflush_r+0x14>
 8002a1c:	f000 f860 	bl	8002ae0 <__sinit>
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <_fflush_r+0x48>)
 8002a22:	429c      	cmp	r4, r3
 8002a24:	d109      	bne.n	8002a3a <_fflush_r+0x2e>
 8002a26:	686c      	ldr	r4, [r5, #4]
 8002a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a2c:	b17b      	cbz	r3, 8002a4e <_fflush_r+0x42>
 8002a2e:	4621      	mov	r1, r4
 8002a30:	4628      	mov	r0, r5
 8002a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a36:	f7ff bf63 	b.w	8002900 <__sflush_r>
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <_fflush_r+0x4c>)
 8002a3c:	429c      	cmp	r4, r3
 8002a3e:	d101      	bne.n	8002a44 <_fflush_r+0x38>
 8002a40:	68ac      	ldr	r4, [r5, #8]
 8002a42:	e7f1      	b.n	8002a28 <_fflush_r+0x1c>
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <_fflush_r+0x50>)
 8002a46:	429c      	cmp	r4, r3
 8002a48:	bf08      	it	eq
 8002a4a:	68ec      	ldreq	r4, [r5, #12]
 8002a4c:	e7ec      	b.n	8002a28 <_fflush_r+0x1c>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	bd38      	pop	{r3, r4, r5, pc}
 8002a52:	bf00      	nop
 8002a54:	08003984 	.word	0x08003984
 8002a58:	080039a4 	.word	0x080039a4
 8002a5c:	08003964 	.word	0x08003964

08002a60 <std>:
 8002a60:	2300      	movs	r3, #0
 8002a62:	b510      	push	{r4, lr}
 8002a64:	4604      	mov	r4, r0
 8002a66:	e9c0 3300 	strd	r3, r3, [r0]
 8002a6a:	6083      	str	r3, [r0, #8]
 8002a6c:	8181      	strh	r1, [r0, #12]
 8002a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8002a70:	81c2      	strh	r2, [r0, #14]
 8002a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a76:	6183      	str	r3, [r0, #24]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	305c      	adds	r0, #92	; 0x5c
 8002a7e:	f7ff fe3f 	bl	8002700 <memset>
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <std+0x38>)
 8002a84:	6263      	str	r3, [r4, #36]	; 0x24
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <std+0x3c>)
 8002a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <std+0x40>)
 8002a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <std+0x44>)
 8002a90:	6224      	str	r4, [r4, #32]
 8002a92:	6323      	str	r3, [r4, #48]	; 0x30
 8002a94:	bd10      	pop	{r4, pc}
 8002a96:	bf00      	nop
 8002a98:	08003661 	.word	0x08003661
 8002a9c:	08003683 	.word	0x08003683
 8002aa0:	080036bb 	.word	0x080036bb
 8002aa4:	080036df 	.word	0x080036df

08002aa8 <_cleanup_r>:
 8002aa8:	4901      	ldr	r1, [pc, #4]	; (8002ab0 <_cleanup_r+0x8>)
 8002aaa:	f000 b885 	b.w	8002bb8 <_fwalk_reent>
 8002aae:	bf00      	nop
 8002ab0:	08002a0d 	.word	0x08002a0d

08002ab4 <__sfmoreglue>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	1e4a      	subs	r2, r1, #1
 8002ab8:	2568      	movs	r5, #104	; 0x68
 8002aba:	4355      	muls	r5, r2
 8002abc:	460e      	mov	r6, r1
 8002abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ac2:	f000 f949 	bl	8002d58 <_malloc_r>
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	b140      	cbz	r0, 8002adc <__sfmoreglue+0x28>
 8002aca:	2100      	movs	r1, #0
 8002acc:	e9c0 1600 	strd	r1, r6, [r0]
 8002ad0:	300c      	adds	r0, #12
 8002ad2:	60a0      	str	r0, [r4, #8]
 8002ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ad8:	f7ff fe12 	bl	8002700 <memset>
 8002adc:	4620      	mov	r0, r4
 8002ade:	bd70      	pop	{r4, r5, r6, pc}

08002ae0 <__sinit>:
 8002ae0:	6983      	ldr	r3, [r0, #24]
 8002ae2:	b510      	push	{r4, lr}
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	bb33      	cbnz	r3, 8002b36 <__sinit+0x56>
 8002ae8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002aec:	6503      	str	r3, [r0, #80]	; 0x50
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <__sinit+0x58>)
 8002af0:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <__sinit+0x5c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6282      	str	r2, [r0, #40]	; 0x28
 8002af6:	4298      	cmp	r0, r3
 8002af8:	bf04      	itt	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	6183      	streq	r3, [r0, #24]
 8002afe:	f000 f81f 	bl	8002b40 <__sfp>
 8002b02:	6060      	str	r0, [r4, #4]
 8002b04:	4620      	mov	r0, r4
 8002b06:	f000 f81b 	bl	8002b40 <__sfp>
 8002b0a:	60a0      	str	r0, [r4, #8]
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f000 f817 	bl	8002b40 <__sfp>
 8002b12:	2200      	movs	r2, #0
 8002b14:	60e0      	str	r0, [r4, #12]
 8002b16:	2104      	movs	r1, #4
 8002b18:	6860      	ldr	r0, [r4, #4]
 8002b1a:	f7ff ffa1 	bl	8002a60 <std>
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2109      	movs	r1, #9
 8002b22:	68a0      	ldr	r0, [r4, #8]
 8002b24:	f7ff ff9c 	bl	8002a60 <std>
 8002b28:	2202      	movs	r2, #2
 8002b2a:	2112      	movs	r1, #18
 8002b2c:	68e0      	ldr	r0, [r4, #12]
 8002b2e:	f7ff ff97 	bl	8002a60 <std>
 8002b32:	2301      	movs	r3, #1
 8002b34:	61a3      	str	r3, [r4, #24]
 8002b36:	bd10      	pop	{r4, pc}
 8002b38:	08003960 	.word	0x08003960
 8002b3c:	08002aa9 	.word	0x08002aa9

08002b40 <__sfp>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <__sfp+0x70>)
 8002b44:	681e      	ldr	r6, [r3, #0]
 8002b46:	69b3      	ldr	r3, [r6, #24]
 8002b48:	4607      	mov	r7, r0
 8002b4a:	b913      	cbnz	r3, 8002b52 <__sfp+0x12>
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	f7ff ffc7 	bl	8002ae0 <__sinit>
 8002b52:	3648      	adds	r6, #72	; 0x48
 8002b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	d503      	bpl.n	8002b64 <__sfp+0x24>
 8002b5c:	6833      	ldr	r3, [r6, #0]
 8002b5e:	b133      	cbz	r3, 8002b6e <__sfp+0x2e>
 8002b60:	6836      	ldr	r6, [r6, #0]
 8002b62:	e7f7      	b.n	8002b54 <__sfp+0x14>
 8002b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b68:	b16d      	cbz	r5, 8002b86 <__sfp+0x46>
 8002b6a:	3468      	adds	r4, #104	; 0x68
 8002b6c:	e7f4      	b.n	8002b58 <__sfp+0x18>
 8002b6e:	2104      	movs	r1, #4
 8002b70:	4638      	mov	r0, r7
 8002b72:	f7ff ff9f 	bl	8002ab4 <__sfmoreglue>
 8002b76:	6030      	str	r0, [r6, #0]
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d1f1      	bne.n	8002b60 <__sfp+0x20>
 8002b7c:	230c      	movs	r3, #12
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4604      	mov	r4, r0
 8002b82:	4620      	mov	r0, r4
 8002b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <__sfp+0x74>)
 8002b88:	6665      	str	r5, [r4, #100]	; 0x64
 8002b8a:	e9c4 5500 	strd	r5, r5, [r4]
 8002b8e:	60a5      	str	r5, [r4, #8]
 8002b90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002b94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ba0:	f7ff fdae 	bl	8002700 <memset>
 8002ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bac:	e7e9      	b.n	8002b82 <__sfp+0x42>
 8002bae:	bf00      	nop
 8002bb0:	08003960 	.word	0x08003960
 8002bb4:	ffff0001 	.word	0xffff0001

08002bb8 <_fwalk_reent>:
 8002bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bbc:	4680      	mov	r8, r0
 8002bbe:	4689      	mov	r9, r1
 8002bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	b914      	cbnz	r4, 8002bce <_fwalk_reent+0x16>
 8002bc8:	4630      	mov	r0, r6
 8002bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002bd2:	3f01      	subs	r7, #1
 8002bd4:	d501      	bpl.n	8002bda <_fwalk_reent+0x22>
 8002bd6:	6824      	ldr	r4, [r4, #0]
 8002bd8:	e7f5      	b.n	8002bc6 <_fwalk_reent+0xe>
 8002bda:	89ab      	ldrh	r3, [r5, #12]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d907      	bls.n	8002bf0 <_fwalk_reent+0x38>
 8002be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002be4:	3301      	adds	r3, #1
 8002be6:	d003      	beq.n	8002bf0 <_fwalk_reent+0x38>
 8002be8:	4629      	mov	r1, r5
 8002bea:	4640      	mov	r0, r8
 8002bec:	47c8      	blx	r9
 8002bee:	4306      	orrs	r6, r0
 8002bf0:	3568      	adds	r5, #104	; 0x68
 8002bf2:	e7ee      	b.n	8002bd2 <_fwalk_reent+0x1a>

08002bf4 <__swhatbuf_r>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	460e      	mov	r6, r1
 8002bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	b096      	sub	sp, #88	; 0x58
 8002c00:	4614      	mov	r4, r2
 8002c02:	461d      	mov	r5, r3
 8002c04:	da07      	bge.n	8002c16 <__swhatbuf_r+0x22>
 8002c06:	2300      	movs	r3, #0
 8002c08:	602b      	str	r3, [r5, #0]
 8002c0a:	89b3      	ldrh	r3, [r6, #12]
 8002c0c:	061a      	lsls	r2, r3, #24
 8002c0e:	d410      	bmi.n	8002c32 <__swhatbuf_r+0x3e>
 8002c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c14:	e00e      	b.n	8002c34 <__swhatbuf_r+0x40>
 8002c16:	466a      	mov	r2, sp
 8002c18:	f000 fd88 	bl	800372c <_fstat_r>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	dbf2      	blt.n	8002c06 <__swhatbuf_r+0x12>
 8002c20:	9a01      	ldr	r2, [sp, #4]
 8002c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c2a:	425a      	negs	r2, r3
 8002c2c:	415a      	adcs	r2, r3
 8002c2e:	602a      	str	r2, [r5, #0]
 8002c30:	e7ee      	b.n	8002c10 <__swhatbuf_r+0x1c>
 8002c32:	2340      	movs	r3, #64	; 0x40
 8002c34:	2000      	movs	r0, #0
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	b016      	add	sp, #88	; 0x58
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}

08002c3c <__smakebuf_r>:
 8002c3c:	898b      	ldrh	r3, [r1, #12]
 8002c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c40:	079d      	lsls	r5, r3, #30
 8002c42:	4606      	mov	r6, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	d507      	bpl.n	8002c58 <__smakebuf_r+0x1c>
 8002c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	6123      	str	r3, [r4, #16]
 8002c50:	2301      	movs	r3, #1
 8002c52:	6163      	str	r3, [r4, #20]
 8002c54:	b002      	add	sp, #8
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
 8002c58:	ab01      	add	r3, sp, #4
 8002c5a:	466a      	mov	r2, sp
 8002c5c:	f7ff ffca 	bl	8002bf4 <__swhatbuf_r>
 8002c60:	9900      	ldr	r1, [sp, #0]
 8002c62:	4605      	mov	r5, r0
 8002c64:	4630      	mov	r0, r6
 8002c66:	f000 f877 	bl	8002d58 <_malloc_r>
 8002c6a:	b948      	cbnz	r0, 8002c80 <__smakebuf_r+0x44>
 8002c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c70:	059a      	lsls	r2, r3, #22
 8002c72:	d4ef      	bmi.n	8002c54 <__smakebuf_r+0x18>
 8002c74:	f023 0303 	bic.w	r3, r3, #3
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	81a3      	strh	r3, [r4, #12]
 8002c7e:	e7e3      	b.n	8002c48 <__smakebuf_r+0xc>
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <__smakebuf_r+0x7c>)
 8002c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c84:	89a3      	ldrh	r3, [r4, #12]
 8002c86:	6020      	str	r0, [r4, #0]
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	81a3      	strh	r3, [r4, #12]
 8002c8e:	9b00      	ldr	r3, [sp, #0]
 8002c90:	6163      	str	r3, [r4, #20]
 8002c92:	9b01      	ldr	r3, [sp, #4]
 8002c94:	6120      	str	r0, [r4, #16]
 8002c96:	b15b      	cbz	r3, 8002cb0 <__smakebuf_r+0x74>
 8002c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f000 fd57 	bl	8003750 <_isatty_r>
 8002ca2:	b128      	cbz	r0, 8002cb0 <__smakebuf_r+0x74>
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	431d      	orrs	r5, r3
 8002cb4:	81a5      	strh	r5, [r4, #12]
 8002cb6:	e7cd      	b.n	8002c54 <__smakebuf_r+0x18>
 8002cb8:	08002aa9 	.word	0x08002aa9

08002cbc <_free_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d045      	beq.n	8002d50 <_free_r+0x94>
 8002cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc8:	1f0c      	subs	r4, r1, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bfb8      	it	lt
 8002cce:	18e4      	addlt	r4, r4, r3
 8002cd0:	f000 fd84 	bl	80037dc <__malloc_lock>
 8002cd4:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <_free_r+0x98>)
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	4610      	mov	r0, r2
 8002cda:	b933      	cbnz	r3, 8002cea <_free_r+0x2e>
 8002cdc:	6063      	str	r3, [r4, #4]
 8002cde:	6014      	str	r4, [r2, #0]
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ce6:	f000 bd7a 	b.w	80037de <__malloc_unlock>
 8002cea:	42a3      	cmp	r3, r4
 8002cec:	d90c      	bls.n	8002d08 <_free_r+0x4c>
 8002cee:	6821      	ldr	r1, [r4, #0]
 8002cf0:	1862      	adds	r2, r4, r1
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	bf04      	itt	eq
 8002cf6:	681a      	ldreq	r2, [r3, #0]
 8002cf8:	685b      	ldreq	r3, [r3, #4]
 8002cfa:	6063      	str	r3, [r4, #4]
 8002cfc:	bf04      	itt	eq
 8002cfe:	1852      	addeq	r2, r2, r1
 8002d00:	6022      	streq	r2, [r4, #0]
 8002d02:	6004      	str	r4, [r0, #0]
 8002d04:	e7ec      	b.n	8002ce0 <_free_r+0x24>
 8002d06:	4613      	mov	r3, r2
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	b10a      	cbz	r2, 8002d10 <_free_r+0x54>
 8002d0c:	42a2      	cmp	r2, r4
 8002d0e:	d9fa      	bls.n	8002d06 <_free_r+0x4a>
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	1858      	adds	r0, r3, r1
 8002d14:	42a0      	cmp	r0, r4
 8002d16:	d10b      	bne.n	8002d30 <_free_r+0x74>
 8002d18:	6820      	ldr	r0, [r4, #0]
 8002d1a:	4401      	add	r1, r0
 8002d1c:	1858      	adds	r0, r3, r1
 8002d1e:	4282      	cmp	r2, r0
 8002d20:	6019      	str	r1, [r3, #0]
 8002d22:	d1dd      	bne.n	8002ce0 <_free_r+0x24>
 8002d24:	6810      	ldr	r0, [r2, #0]
 8002d26:	6852      	ldr	r2, [r2, #4]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	4401      	add	r1, r0
 8002d2c:	6019      	str	r1, [r3, #0]
 8002d2e:	e7d7      	b.n	8002ce0 <_free_r+0x24>
 8002d30:	d902      	bls.n	8002d38 <_free_r+0x7c>
 8002d32:	230c      	movs	r3, #12
 8002d34:	602b      	str	r3, [r5, #0]
 8002d36:	e7d3      	b.n	8002ce0 <_free_r+0x24>
 8002d38:	6820      	ldr	r0, [r4, #0]
 8002d3a:	1821      	adds	r1, r4, r0
 8002d3c:	428a      	cmp	r2, r1
 8002d3e:	bf04      	itt	eq
 8002d40:	6811      	ldreq	r1, [r2, #0]
 8002d42:	6852      	ldreq	r2, [r2, #4]
 8002d44:	6062      	str	r2, [r4, #4]
 8002d46:	bf04      	itt	eq
 8002d48:	1809      	addeq	r1, r1, r0
 8002d4a:	6021      	streq	r1, [r4, #0]
 8002d4c:	605c      	str	r4, [r3, #4]
 8002d4e:	e7c7      	b.n	8002ce0 <_free_r+0x24>
 8002d50:	bd38      	pop	{r3, r4, r5, pc}
 8002d52:	bf00      	nop
 8002d54:	20000104 	.word	0x20000104

08002d58 <_malloc_r>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	1ccd      	adds	r5, r1, #3
 8002d5c:	f025 0503 	bic.w	r5, r5, #3
 8002d60:	3508      	adds	r5, #8
 8002d62:	2d0c      	cmp	r5, #12
 8002d64:	bf38      	it	cc
 8002d66:	250c      	movcc	r5, #12
 8002d68:	2d00      	cmp	r5, #0
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	db01      	blt.n	8002d72 <_malloc_r+0x1a>
 8002d6e:	42a9      	cmp	r1, r5
 8002d70:	d903      	bls.n	8002d7a <_malloc_r+0x22>
 8002d72:	230c      	movs	r3, #12
 8002d74:	6033      	str	r3, [r6, #0]
 8002d76:	2000      	movs	r0, #0
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
 8002d7a:	f000 fd2f 	bl	80037dc <__malloc_lock>
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <_malloc_r+0xac>)
 8002d80:	6814      	ldr	r4, [r2, #0]
 8002d82:	4621      	mov	r1, r4
 8002d84:	b991      	cbnz	r1, 8002dac <_malloc_r+0x54>
 8002d86:	4c20      	ldr	r4, [pc, #128]	; (8002e08 <_malloc_r+0xb0>)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	b91b      	cbnz	r3, 8002d94 <_malloc_r+0x3c>
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	f000 fc57 	bl	8003640 <_sbrk_r>
 8002d92:	6020      	str	r0, [r4, #0]
 8002d94:	4629      	mov	r1, r5
 8002d96:	4630      	mov	r0, r6
 8002d98:	f000 fc52 	bl	8003640 <_sbrk_r>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d124      	bne.n	8002dea <_malloc_r+0x92>
 8002da0:	230c      	movs	r3, #12
 8002da2:	6033      	str	r3, [r6, #0]
 8002da4:	4630      	mov	r0, r6
 8002da6:	f000 fd1a 	bl	80037de <__malloc_unlock>
 8002daa:	e7e4      	b.n	8002d76 <_malloc_r+0x1e>
 8002dac:	680b      	ldr	r3, [r1, #0]
 8002dae:	1b5b      	subs	r3, r3, r5
 8002db0:	d418      	bmi.n	8002de4 <_malloc_r+0x8c>
 8002db2:	2b0b      	cmp	r3, #11
 8002db4:	d90f      	bls.n	8002dd6 <_malloc_r+0x7e>
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	50cd      	str	r5, [r1, r3]
 8002dba:	18cc      	adds	r4, r1, r3
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f000 fd0e 	bl	80037de <__malloc_unlock>
 8002dc2:	f104 000b 	add.w	r0, r4, #11
 8002dc6:	1d23      	adds	r3, r4, #4
 8002dc8:	f020 0007 	bic.w	r0, r0, #7
 8002dcc:	1ac3      	subs	r3, r0, r3
 8002dce:	d0d3      	beq.n	8002d78 <_malloc_r+0x20>
 8002dd0:	425a      	negs	r2, r3
 8002dd2:	50e2      	str	r2, [r4, r3]
 8002dd4:	e7d0      	b.n	8002d78 <_malloc_r+0x20>
 8002dd6:	428c      	cmp	r4, r1
 8002dd8:	684b      	ldr	r3, [r1, #4]
 8002dda:	bf16      	itet	ne
 8002ddc:	6063      	strne	r3, [r4, #4]
 8002dde:	6013      	streq	r3, [r2, #0]
 8002de0:	460c      	movne	r4, r1
 8002de2:	e7eb      	b.n	8002dbc <_malloc_r+0x64>
 8002de4:	460c      	mov	r4, r1
 8002de6:	6849      	ldr	r1, [r1, #4]
 8002de8:	e7cc      	b.n	8002d84 <_malloc_r+0x2c>
 8002dea:	1cc4      	adds	r4, r0, #3
 8002dec:	f024 0403 	bic.w	r4, r4, #3
 8002df0:	42a0      	cmp	r0, r4
 8002df2:	d005      	beq.n	8002e00 <_malloc_r+0xa8>
 8002df4:	1a21      	subs	r1, r4, r0
 8002df6:	4630      	mov	r0, r6
 8002df8:	f000 fc22 	bl	8003640 <_sbrk_r>
 8002dfc:	3001      	adds	r0, #1
 8002dfe:	d0cf      	beq.n	8002da0 <_malloc_r+0x48>
 8002e00:	6025      	str	r5, [r4, #0]
 8002e02:	e7db      	b.n	8002dbc <_malloc_r+0x64>
 8002e04:	20000104 	.word	0x20000104
 8002e08:	20000108 	.word	0x20000108

08002e0c <__ssputs_r>:
 8002e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e10:	688e      	ldr	r6, [r1, #8]
 8002e12:	429e      	cmp	r6, r3
 8002e14:	4682      	mov	sl, r0
 8002e16:	460c      	mov	r4, r1
 8002e18:	4690      	mov	r8, r2
 8002e1a:	4699      	mov	r9, r3
 8002e1c:	d837      	bhi.n	8002e8e <__ssputs_r+0x82>
 8002e1e:	898a      	ldrh	r2, [r1, #12]
 8002e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e24:	d031      	beq.n	8002e8a <__ssputs_r+0x7e>
 8002e26:	6825      	ldr	r5, [r4, #0]
 8002e28:	6909      	ldr	r1, [r1, #16]
 8002e2a:	1a6f      	subs	r7, r5, r1
 8002e2c:	6965      	ldr	r5, [r4, #20]
 8002e2e:	2302      	movs	r3, #2
 8002e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e34:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e38:	f109 0301 	add.w	r3, r9, #1
 8002e3c:	443b      	add	r3, r7
 8002e3e:	429d      	cmp	r5, r3
 8002e40:	bf38      	it	cc
 8002e42:	461d      	movcc	r5, r3
 8002e44:	0553      	lsls	r3, r2, #21
 8002e46:	d530      	bpl.n	8002eaa <__ssputs_r+0x9e>
 8002e48:	4629      	mov	r1, r5
 8002e4a:	f7ff ff85 	bl	8002d58 <_malloc_r>
 8002e4e:	4606      	mov	r6, r0
 8002e50:	b950      	cbnz	r0, 8002e68 <__ssputs_r+0x5c>
 8002e52:	230c      	movs	r3, #12
 8002e54:	f8ca 3000 	str.w	r3, [sl]
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5e:	81a3      	strh	r3, [r4, #12]
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e68:	463a      	mov	r2, r7
 8002e6a:	6921      	ldr	r1, [r4, #16]
 8002e6c:	f000 fc92 	bl	8003794 <memcpy>
 8002e70:	89a3      	ldrh	r3, [r4, #12]
 8002e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7a:	81a3      	strh	r3, [r4, #12]
 8002e7c:	6126      	str	r6, [r4, #16]
 8002e7e:	6165      	str	r5, [r4, #20]
 8002e80:	443e      	add	r6, r7
 8002e82:	1bed      	subs	r5, r5, r7
 8002e84:	6026      	str	r6, [r4, #0]
 8002e86:	60a5      	str	r5, [r4, #8]
 8002e88:	464e      	mov	r6, r9
 8002e8a:	454e      	cmp	r6, r9
 8002e8c:	d900      	bls.n	8002e90 <__ssputs_r+0x84>
 8002e8e:	464e      	mov	r6, r9
 8002e90:	4632      	mov	r2, r6
 8002e92:	4641      	mov	r1, r8
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	f000 fc88 	bl	80037aa <memmove>
 8002e9a:	68a3      	ldr	r3, [r4, #8]
 8002e9c:	1b9b      	subs	r3, r3, r6
 8002e9e:	60a3      	str	r3, [r4, #8]
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	441e      	add	r6, r3
 8002ea4:	6026      	str	r6, [r4, #0]
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	e7dc      	b.n	8002e64 <__ssputs_r+0x58>
 8002eaa:	462a      	mov	r2, r5
 8002eac:	f000 fc98 	bl	80037e0 <_realloc_r>
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d1e2      	bne.n	8002e7c <__ssputs_r+0x70>
 8002eb6:	6921      	ldr	r1, [r4, #16]
 8002eb8:	4650      	mov	r0, sl
 8002eba:	f7ff feff 	bl	8002cbc <_free_r>
 8002ebe:	e7c8      	b.n	8002e52 <__ssputs_r+0x46>

08002ec0 <_svfiprintf_r>:
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec4:	461d      	mov	r5, r3
 8002ec6:	898b      	ldrh	r3, [r1, #12]
 8002ec8:	061f      	lsls	r7, r3, #24
 8002eca:	b09d      	sub	sp, #116	; 0x74
 8002ecc:	4680      	mov	r8, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	4616      	mov	r6, r2
 8002ed2:	d50f      	bpl.n	8002ef4 <_svfiprintf_r+0x34>
 8002ed4:	690b      	ldr	r3, [r1, #16]
 8002ed6:	b96b      	cbnz	r3, 8002ef4 <_svfiprintf_r+0x34>
 8002ed8:	2140      	movs	r1, #64	; 0x40
 8002eda:	f7ff ff3d 	bl	8002d58 <_malloc_r>
 8002ede:	6020      	str	r0, [r4, #0]
 8002ee0:	6120      	str	r0, [r4, #16]
 8002ee2:	b928      	cbnz	r0, 8002ef0 <_svfiprintf_r+0x30>
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	f8c8 3000 	str.w	r3, [r8]
 8002eea:	f04f 30ff 	mov.w	r0, #4294967295
 8002eee:	e0c8      	b.n	8003082 <_svfiprintf_r+0x1c2>
 8002ef0:	2340      	movs	r3, #64	; 0x40
 8002ef2:	6163      	str	r3, [r4, #20]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef8:	2320      	movs	r3, #32
 8002efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002efe:	2330      	movs	r3, #48	; 0x30
 8002f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f04:	9503      	str	r5, [sp, #12]
 8002f06:	f04f 0b01 	mov.w	fp, #1
 8002f0a:	4637      	mov	r7, r6
 8002f0c:	463d      	mov	r5, r7
 8002f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f12:	b10b      	cbz	r3, 8002f18 <_svfiprintf_r+0x58>
 8002f14:	2b25      	cmp	r3, #37	; 0x25
 8002f16:	d13e      	bne.n	8002f96 <_svfiprintf_r+0xd6>
 8002f18:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f1c:	d00b      	beq.n	8002f36 <_svfiprintf_r+0x76>
 8002f1e:	4653      	mov	r3, sl
 8002f20:	4632      	mov	r2, r6
 8002f22:	4621      	mov	r1, r4
 8002f24:	4640      	mov	r0, r8
 8002f26:	f7ff ff71 	bl	8002e0c <__ssputs_r>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f000 80a4 	beq.w	8003078 <_svfiprintf_r+0x1b8>
 8002f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f32:	4453      	add	r3, sl
 8002f34:	9309      	str	r3, [sp, #36]	; 0x24
 8002f36:	783b      	ldrb	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 809d 	beq.w	8003078 <_svfiprintf_r+0x1b8>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f48:	9304      	str	r3, [sp, #16]
 8002f4a:	9307      	str	r3, [sp, #28]
 8002f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f50:	931a      	str	r3, [sp, #104]	; 0x68
 8002f52:	462f      	mov	r7, r5
 8002f54:	2205      	movs	r2, #5
 8002f56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f5a:	4850      	ldr	r0, [pc, #320]	; (800309c <_svfiprintf_r+0x1dc>)
 8002f5c:	f7fd f960 	bl	8000220 <memchr>
 8002f60:	9b04      	ldr	r3, [sp, #16]
 8002f62:	b9d0      	cbnz	r0, 8002f9a <_svfiprintf_r+0xda>
 8002f64:	06d9      	lsls	r1, r3, #27
 8002f66:	bf44      	itt	mi
 8002f68:	2220      	movmi	r2, #32
 8002f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f6e:	071a      	lsls	r2, r3, #28
 8002f70:	bf44      	itt	mi
 8002f72:	222b      	movmi	r2, #43	; 0x2b
 8002f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f78:	782a      	ldrb	r2, [r5, #0]
 8002f7a:	2a2a      	cmp	r2, #42	; 0x2a
 8002f7c:	d015      	beq.n	8002faa <_svfiprintf_r+0xea>
 8002f7e:	9a07      	ldr	r2, [sp, #28]
 8002f80:	462f      	mov	r7, r5
 8002f82:	2000      	movs	r0, #0
 8002f84:	250a      	movs	r5, #10
 8002f86:	4639      	mov	r1, r7
 8002f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f8c:	3b30      	subs	r3, #48	; 0x30
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	d94d      	bls.n	800302e <_svfiprintf_r+0x16e>
 8002f92:	b1b8      	cbz	r0, 8002fc4 <_svfiprintf_r+0x104>
 8002f94:	e00f      	b.n	8002fb6 <_svfiprintf_r+0xf6>
 8002f96:	462f      	mov	r7, r5
 8002f98:	e7b8      	b.n	8002f0c <_svfiprintf_r+0x4c>
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <_svfiprintf_r+0x1dc>)
 8002f9c:	1a80      	subs	r0, r0, r2
 8002f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8002fa2:	4318      	orrs	r0, r3
 8002fa4:	9004      	str	r0, [sp, #16]
 8002fa6:	463d      	mov	r5, r7
 8002fa8:	e7d3      	b.n	8002f52 <_svfiprintf_r+0x92>
 8002faa:	9a03      	ldr	r2, [sp, #12]
 8002fac:	1d11      	adds	r1, r2, #4
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	9103      	str	r1, [sp, #12]
 8002fb2:	2a00      	cmp	r2, #0
 8002fb4:	db01      	blt.n	8002fba <_svfiprintf_r+0xfa>
 8002fb6:	9207      	str	r2, [sp, #28]
 8002fb8:	e004      	b.n	8002fc4 <_svfiprintf_r+0x104>
 8002fba:	4252      	negs	r2, r2
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	9207      	str	r2, [sp, #28]
 8002fc2:	9304      	str	r3, [sp, #16]
 8002fc4:	783b      	ldrb	r3, [r7, #0]
 8002fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8002fc8:	d10c      	bne.n	8002fe4 <_svfiprintf_r+0x124>
 8002fca:	787b      	ldrb	r3, [r7, #1]
 8002fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8002fce:	d133      	bne.n	8003038 <_svfiprintf_r+0x178>
 8002fd0:	9b03      	ldr	r3, [sp, #12]
 8002fd2:	1d1a      	adds	r2, r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	9203      	str	r2, [sp, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bfb8      	it	lt
 8002fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fe0:	3702      	adds	r7, #2
 8002fe2:	9305      	str	r3, [sp, #20]
 8002fe4:	4d2e      	ldr	r5, [pc, #184]	; (80030a0 <_svfiprintf_r+0x1e0>)
 8002fe6:	7839      	ldrb	r1, [r7, #0]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4628      	mov	r0, r5
 8002fec:	f7fd f918 	bl	8000220 <memchr>
 8002ff0:	b138      	cbz	r0, 8003002 <_svfiprintf_r+0x142>
 8002ff2:	2340      	movs	r3, #64	; 0x40
 8002ff4:	1b40      	subs	r0, r0, r5
 8002ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8002ffa:	9b04      	ldr	r3, [sp, #16]
 8002ffc:	4303      	orrs	r3, r0
 8002ffe:	3701      	adds	r7, #1
 8003000:	9304      	str	r3, [sp, #16]
 8003002:	7839      	ldrb	r1, [r7, #0]
 8003004:	4827      	ldr	r0, [pc, #156]	; (80030a4 <_svfiprintf_r+0x1e4>)
 8003006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800300a:	2206      	movs	r2, #6
 800300c:	1c7e      	adds	r6, r7, #1
 800300e:	f7fd f907 	bl	8000220 <memchr>
 8003012:	2800      	cmp	r0, #0
 8003014:	d038      	beq.n	8003088 <_svfiprintf_r+0x1c8>
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <_svfiprintf_r+0x1e8>)
 8003018:	bb13      	cbnz	r3, 8003060 <_svfiprintf_r+0x1a0>
 800301a:	9b03      	ldr	r3, [sp, #12]
 800301c:	3307      	adds	r3, #7
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	3308      	adds	r3, #8
 8003024:	9303      	str	r3, [sp, #12]
 8003026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003028:	444b      	add	r3, r9
 800302a:	9309      	str	r3, [sp, #36]	; 0x24
 800302c:	e76d      	b.n	8002f0a <_svfiprintf_r+0x4a>
 800302e:	fb05 3202 	mla	r2, r5, r2, r3
 8003032:	2001      	movs	r0, #1
 8003034:	460f      	mov	r7, r1
 8003036:	e7a6      	b.n	8002f86 <_svfiprintf_r+0xc6>
 8003038:	2300      	movs	r3, #0
 800303a:	3701      	adds	r7, #1
 800303c:	9305      	str	r3, [sp, #20]
 800303e:	4619      	mov	r1, r3
 8003040:	250a      	movs	r5, #10
 8003042:	4638      	mov	r0, r7
 8003044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003048:	3a30      	subs	r2, #48	; 0x30
 800304a:	2a09      	cmp	r2, #9
 800304c:	d903      	bls.n	8003056 <_svfiprintf_r+0x196>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0c8      	beq.n	8002fe4 <_svfiprintf_r+0x124>
 8003052:	9105      	str	r1, [sp, #20]
 8003054:	e7c6      	b.n	8002fe4 <_svfiprintf_r+0x124>
 8003056:	fb05 2101 	mla	r1, r5, r1, r2
 800305a:	2301      	movs	r3, #1
 800305c:	4607      	mov	r7, r0
 800305e:	e7f0      	b.n	8003042 <_svfiprintf_r+0x182>
 8003060:	ab03      	add	r3, sp, #12
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4622      	mov	r2, r4
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <_svfiprintf_r+0x1ec>)
 8003068:	a904      	add	r1, sp, #16
 800306a:	4640      	mov	r0, r8
 800306c:	f3af 8000 	nop.w
 8003070:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003074:	4681      	mov	r9, r0
 8003076:	d1d6      	bne.n	8003026 <_svfiprintf_r+0x166>
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	065b      	lsls	r3, r3, #25
 800307c:	f53f af35 	bmi.w	8002eea <_svfiprintf_r+0x2a>
 8003080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003082:	b01d      	add	sp, #116	; 0x74
 8003084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003088:	ab03      	add	r3, sp, #12
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4622      	mov	r2, r4
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <_svfiprintf_r+0x1ec>)
 8003090:	a904      	add	r1, sp, #16
 8003092:	4640      	mov	r0, r8
 8003094:	f000 f9c2 	bl	800341c <_printf_i>
 8003098:	e7ea      	b.n	8003070 <_svfiprintf_r+0x1b0>
 800309a:	bf00      	nop
 800309c:	080039c4 	.word	0x080039c4
 80030a0:	080039ca 	.word	0x080039ca
 80030a4:	080039ce 	.word	0x080039ce
 80030a8:	00000000 	.word	0x00000000
 80030ac:	08002e0d 	.word	0x08002e0d

080030b0 <__sfputc_r>:
 80030b0:	6893      	ldr	r3, [r2, #8]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	b410      	push	{r4}
 80030b8:	6093      	str	r3, [r2, #8]
 80030ba:	da08      	bge.n	80030ce <__sfputc_r+0x1e>
 80030bc:	6994      	ldr	r4, [r2, #24]
 80030be:	42a3      	cmp	r3, r4
 80030c0:	db01      	blt.n	80030c6 <__sfputc_r+0x16>
 80030c2:	290a      	cmp	r1, #10
 80030c4:	d103      	bne.n	80030ce <__sfputc_r+0x1e>
 80030c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030ca:	f7ff bb59 	b.w	8002780 <__swbuf_r>
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	1c58      	adds	r0, r3, #1
 80030d2:	6010      	str	r0, [r2, #0]
 80030d4:	7019      	strb	r1, [r3, #0]
 80030d6:	4608      	mov	r0, r1
 80030d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030dc:	4770      	bx	lr

080030de <__sfputs_r>:
 80030de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e0:	4606      	mov	r6, r0
 80030e2:	460f      	mov	r7, r1
 80030e4:	4614      	mov	r4, r2
 80030e6:	18d5      	adds	r5, r2, r3
 80030e8:	42ac      	cmp	r4, r5
 80030ea:	d101      	bne.n	80030f0 <__sfputs_r+0x12>
 80030ec:	2000      	movs	r0, #0
 80030ee:	e007      	b.n	8003100 <__sfputs_r+0x22>
 80030f0:	463a      	mov	r2, r7
 80030f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f6:	4630      	mov	r0, r6
 80030f8:	f7ff ffda 	bl	80030b0 <__sfputc_r>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d1f3      	bne.n	80030e8 <__sfputs_r+0xa>
 8003100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003104 <_vfiprintf_r>:
 8003104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003108:	460c      	mov	r4, r1
 800310a:	b09d      	sub	sp, #116	; 0x74
 800310c:	4617      	mov	r7, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4606      	mov	r6, r0
 8003112:	b118      	cbz	r0, 800311c <_vfiprintf_r+0x18>
 8003114:	6983      	ldr	r3, [r0, #24]
 8003116:	b90b      	cbnz	r3, 800311c <_vfiprintf_r+0x18>
 8003118:	f7ff fce2 	bl	8002ae0 <__sinit>
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <_vfiprintf_r+0x20c>)
 800311e:	429c      	cmp	r4, r3
 8003120:	d158      	bne.n	80031d4 <_vfiprintf_r+0xd0>
 8003122:	6874      	ldr	r4, [r6, #4]
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	0718      	lsls	r0, r3, #28
 8003128:	d55e      	bpl.n	80031e8 <_vfiprintf_r+0xe4>
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <_vfiprintf_r+0xe4>
 8003130:	2300      	movs	r3, #0
 8003132:	9309      	str	r3, [sp, #36]	; 0x24
 8003134:	2320      	movs	r3, #32
 8003136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800313a:	2330      	movs	r3, #48	; 0x30
 800313c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003140:	9503      	str	r5, [sp, #12]
 8003142:	f04f 0b01 	mov.w	fp, #1
 8003146:	46b8      	mov	r8, r7
 8003148:	4645      	mov	r5, r8
 800314a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800314e:	b10b      	cbz	r3, 8003154 <_vfiprintf_r+0x50>
 8003150:	2b25      	cmp	r3, #37	; 0x25
 8003152:	d154      	bne.n	80031fe <_vfiprintf_r+0xfa>
 8003154:	ebb8 0a07 	subs.w	sl, r8, r7
 8003158:	d00b      	beq.n	8003172 <_vfiprintf_r+0x6e>
 800315a:	4653      	mov	r3, sl
 800315c:	463a      	mov	r2, r7
 800315e:	4621      	mov	r1, r4
 8003160:	4630      	mov	r0, r6
 8003162:	f7ff ffbc 	bl	80030de <__sfputs_r>
 8003166:	3001      	adds	r0, #1
 8003168:	f000 80c2 	beq.w	80032f0 <_vfiprintf_r+0x1ec>
 800316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800316e:	4453      	add	r3, sl
 8003170:	9309      	str	r3, [sp, #36]	; 0x24
 8003172:	f898 3000 	ldrb.w	r3, [r8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80ba 	beq.w	80032f0 <_vfiprintf_r+0x1ec>
 800317c:	2300      	movs	r3, #0
 800317e:	f04f 32ff 	mov.w	r2, #4294967295
 8003182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003186:	9304      	str	r3, [sp, #16]
 8003188:	9307      	str	r3, [sp, #28]
 800318a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800318e:	931a      	str	r3, [sp, #104]	; 0x68
 8003190:	46a8      	mov	r8, r5
 8003192:	2205      	movs	r2, #5
 8003194:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003198:	485e      	ldr	r0, [pc, #376]	; (8003314 <_vfiprintf_r+0x210>)
 800319a:	f7fd f841 	bl	8000220 <memchr>
 800319e:	9b04      	ldr	r3, [sp, #16]
 80031a0:	bb78      	cbnz	r0, 8003202 <_vfiprintf_r+0xfe>
 80031a2:	06d9      	lsls	r1, r3, #27
 80031a4:	bf44      	itt	mi
 80031a6:	2220      	movmi	r2, #32
 80031a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031ac:	071a      	lsls	r2, r3, #28
 80031ae:	bf44      	itt	mi
 80031b0:	222b      	movmi	r2, #43	; 0x2b
 80031b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031b6:	782a      	ldrb	r2, [r5, #0]
 80031b8:	2a2a      	cmp	r2, #42	; 0x2a
 80031ba:	d02a      	beq.n	8003212 <_vfiprintf_r+0x10e>
 80031bc:	9a07      	ldr	r2, [sp, #28]
 80031be:	46a8      	mov	r8, r5
 80031c0:	2000      	movs	r0, #0
 80031c2:	250a      	movs	r5, #10
 80031c4:	4641      	mov	r1, r8
 80031c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ca:	3b30      	subs	r3, #48	; 0x30
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d969      	bls.n	80032a4 <_vfiprintf_r+0x1a0>
 80031d0:	b360      	cbz	r0, 800322c <_vfiprintf_r+0x128>
 80031d2:	e024      	b.n	800321e <_vfiprintf_r+0x11a>
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <_vfiprintf_r+0x214>)
 80031d6:	429c      	cmp	r4, r3
 80031d8:	d101      	bne.n	80031de <_vfiprintf_r+0xda>
 80031da:	68b4      	ldr	r4, [r6, #8]
 80031dc:	e7a2      	b.n	8003124 <_vfiprintf_r+0x20>
 80031de:	4b4f      	ldr	r3, [pc, #316]	; (800331c <_vfiprintf_r+0x218>)
 80031e0:	429c      	cmp	r4, r3
 80031e2:	bf08      	it	eq
 80031e4:	68f4      	ldreq	r4, [r6, #12]
 80031e6:	e79d      	b.n	8003124 <_vfiprintf_r+0x20>
 80031e8:	4621      	mov	r1, r4
 80031ea:	4630      	mov	r0, r6
 80031ec:	f7ff fb1a 	bl	8002824 <__swsetup_r>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d09d      	beq.n	8003130 <_vfiprintf_r+0x2c>
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	b01d      	add	sp, #116	; 0x74
 80031fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031fe:	46a8      	mov	r8, r5
 8003200:	e7a2      	b.n	8003148 <_vfiprintf_r+0x44>
 8003202:	4a44      	ldr	r2, [pc, #272]	; (8003314 <_vfiprintf_r+0x210>)
 8003204:	1a80      	subs	r0, r0, r2
 8003206:	fa0b f000 	lsl.w	r0, fp, r0
 800320a:	4318      	orrs	r0, r3
 800320c:	9004      	str	r0, [sp, #16]
 800320e:	4645      	mov	r5, r8
 8003210:	e7be      	b.n	8003190 <_vfiprintf_r+0x8c>
 8003212:	9a03      	ldr	r2, [sp, #12]
 8003214:	1d11      	adds	r1, r2, #4
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	9103      	str	r1, [sp, #12]
 800321a:	2a00      	cmp	r2, #0
 800321c:	db01      	blt.n	8003222 <_vfiprintf_r+0x11e>
 800321e:	9207      	str	r2, [sp, #28]
 8003220:	e004      	b.n	800322c <_vfiprintf_r+0x128>
 8003222:	4252      	negs	r2, r2
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	9207      	str	r2, [sp, #28]
 800322a:	9304      	str	r3, [sp, #16]
 800322c:	f898 3000 	ldrb.w	r3, [r8]
 8003230:	2b2e      	cmp	r3, #46	; 0x2e
 8003232:	d10e      	bne.n	8003252 <_vfiprintf_r+0x14e>
 8003234:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003238:	2b2a      	cmp	r3, #42	; 0x2a
 800323a:	d138      	bne.n	80032ae <_vfiprintf_r+0x1aa>
 800323c:	9b03      	ldr	r3, [sp, #12]
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	9203      	str	r2, [sp, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	bfb8      	it	lt
 8003248:	f04f 33ff 	movlt.w	r3, #4294967295
 800324c:	f108 0802 	add.w	r8, r8, #2
 8003250:	9305      	str	r3, [sp, #20]
 8003252:	4d33      	ldr	r5, [pc, #204]	; (8003320 <_vfiprintf_r+0x21c>)
 8003254:	f898 1000 	ldrb.w	r1, [r8]
 8003258:	2203      	movs	r2, #3
 800325a:	4628      	mov	r0, r5
 800325c:	f7fc ffe0 	bl	8000220 <memchr>
 8003260:	b140      	cbz	r0, 8003274 <_vfiprintf_r+0x170>
 8003262:	2340      	movs	r3, #64	; 0x40
 8003264:	1b40      	subs	r0, r0, r5
 8003266:	fa03 f000 	lsl.w	r0, r3, r0
 800326a:	9b04      	ldr	r3, [sp, #16]
 800326c:	4303      	orrs	r3, r0
 800326e:	f108 0801 	add.w	r8, r8, #1
 8003272:	9304      	str	r3, [sp, #16]
 8003274:	f898 1000 	ldrb.w	r1, [r8]
 8003278:	482a      	ldr	r0, [pc, #168]	; (8003324 <_vfiprintf_r+0x220>)
 800327a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800327e:	2206      	movs	r2, #6
 8003280:	f108 0701 	add.w	r7, r8, #1
 8003284:	f7fc ffcc 	bl	8000220 <memchr>
 8003288:	2800      	cmp	r0, #0
 800328a:	d037      	beq.n	80032fc <_vfiprintf_r+0x1f8>
 800328c:	4b26      	ldr	r3, [pc, #152]	; (8003328 <_vfiprintf_r+0x224>)
 800328e:	bb1b      	cbnz	r3, 80032d8 <_vfiprintf_r+0x1d4>
 8003290:	9b03      	ldr	r3, [sp, #12]
 8003292:	3307      	adds	r3, #7
 8003294:	f023 0307 	bic.w	r3, r3, #7
 8003298:	3308      	adds	r3, #8
 800329a:	9303      	str	r3, [sp, #12]
 800329c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800329e:	444b      	add	r3, r9
 80032a0:	9309      	str	r3, [sp, #36]	; 0x24
 80032a2:	e750      	b.n	8003146 <_vfiprintf_r+0x42>
 80032a4:	fb05 3202 	mla	r2, r5, r2, r3
 80032a8:	2001      	movs	r0, #1
 80032aa:	4688      	mov	r8, r1
 80032ac:	e78a      	b.n	80031c4 <_vfiprintf_r+0xc0>
 80032ae:	2300      	movs	r3, #0
 80032b0:	f108 0801 	add.w	r8, r8, #1
 80032b4:	9305      	str	r3, [sp, #20]
 80032b6:	4619      	mov	r1, r3
 80032b8:	250a      	movs	r5, #10
 80032ba:	4640      	mov	r0, r8
 80032bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032c0:	3a30      	subs	r2, #48	; 0x30
 80032c2:	2a09      	cmp	r2, #9
 80032c4:	d903      	bls.n	80032ce <_vfiprintf_r+0x1ca>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0c3      	beq.n	8003252 <_vfiprintf_r+0x14e>
 80032ca:	9105      	str	r1, [sp, #20]
 80032cc:	e7c1      	b.n	8003252 <_vfiprintf_r+0x14e>
 80032ce:	fb05 2101 	mla	r1, r5, r1, r2
 80032d2:	2301      	movs	r3, #1
 80032d4:	4680      	mov	r8, r0
 80032d6:	e7f0      	b.n	80032ba <_vfiprintf_r+0x1b6>
 80032d8:	ab03      	add	r3, sp, #12
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4622      	mov	r2, r4
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <_vfiprintf_r+0x228>)
 80032e0:	a904      	add	r1, sp, #16
 80032e2:	4630      	mov	r0, r6
 80032e4:	f3af 8000 	nop.w
 80032e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032ec:	4681      	mov	r9, r0
 80032ee:	d1d5      	bne.n	800329c <_vfiprintf_r+0x198>
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	065b      	lsls	r3, r3, #25
 80032f4:	f53f af7e 	bmi.w	80031f4 <_vfiprintf_r+0xf0>
 80032f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032fa:	e77d      	b.n	80031f8 <_vfiprintf_r+0xf4>
 80032fc:	ab03      	add	r3, sp, #12
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4622      	mov	r2, r4
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <_vfiprintf_r+0x228>)
 8003304:	a904      	add	r1, sp, #16
 8003306:	4630      	mov	r0, r6
 8003308:	f000 f888 	bl	800341c <_printf_i>
 800330c:	e7ec      	b.n	80032e8 <_vfiprintf_r+0x1e4>
 800330e:	bf00      	nop
 8003310:	08003984 	.word	0x08003984
 8003314:	080039c4 	.word	0x080039c4
 8003318:	080039a4 	.word	0x080039a4
 800331c:	08003964 	.word	0x08003964
 8003320:	080039ca 	.word	0x080039ca
 8003324:	080039ce 	.word	0x080039ce
 8003328:	00000000 	.word	0x00000000
 800332c:	080030df 	.word	0x080030df

08003330 <_printf_common>:
 8003330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003334:	4691      	mov	r9, r2
 8003336:	461f      	mov	r7, r3
 8003338:	688a      	ldr	r2, [r1, #8]
 800333a:	690b      	ldr	r3, [r1, #16]
 800333c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003340:	4293      	cmp	r3, r2
 8003342:	bfb8      	it	lt
 8003344:	4613      	movlt	r3, r2
 8003346:	f8c9 3000 	str.w	r3, [r9]
 800334a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800334e:	4606      	mov	r6, r0
 8003350:	460c      	mov	r4, r1
 8003352:	b112      	cbz	r2, 800335a <_printf_common+0x2a>
 8003354:	3301      	adds	r3, #1
 8003356:	f8c9 3000 	str.w	r3, [r9]
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	0699      	lsls	r1, r3, #26
 800335e:	bf42      	ittt	mi
 8003360:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003364:	3302      	addmi	r3, #2
 8003366:	f8c9 3000 	strmi.w	r3, [r9]
 800336a:	6825      	ldr	r5, [r4, #0]
 800336c:	f015 0506 	ands.w	r5, r5, #6
 8003370:	d107      	bne.n	8003382 <_printf_common+0x52>
 8003372:	f104 0a19 	add.w	sl, r4, #25
 8003376:	68e3      	ldr	r3, [r4, #12]
 8003378:	f8d9 2000 	ldr.w	r2, [r9]
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	42ab      	cmp	r3, r5
 8003380:	dc28      	bgt.n	80033d4 <_printf_common+0xa4>
 8003382:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	3300      	adds	r3, #0
 800338a:	bf18      	it	ne
 800338c:	2301      	movne	r3, #1
 800338e:	0692      	lsls	r2, r2, #26
 8003390:	d42d      	bmi.n	80033ee <_printf_common+0xbe>
 8003392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003396:	4639      	mov	r1, r7
 8003398:	4630      	mov	r0, r6
 800339a:	47c0      	blx	r8
 800339c:	3001      	adds	r0, #1
 800339e:	d020      	beq.n	80033e2 <_printf_common+0xb2>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	68e5      	ldr	r5, [r4, #12]
 80033a4:	f8d9 2000 	ldr.w	r2, [r9]
 80033a8:	f003 0306 	and.w	r3, r3, #6
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	bf08      	it	eq
 80033b0:	1aad      	subeq	r5, r5, r2
 80033b2:	68a3      	ldr	r3, [r4, #8]
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	bf0c      	ite	eq
 80033b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033bc:	2500      	movne	r5, #0
 80033be:	4293      	cmp	r3, r2
 80033c0:	bfc4      	itt	gt
 80033c2:	1a9b      	subgt	r3, r3, r2
 80033c4:	18ed      	addgt	r5, r5, r3
 80033c6:	f04f 0900 	mov.w	r9, #0
 80033ca:	341a      	adds	r4, #26
 80033cc:	454d      	cmp	r5, r9
 80033ce:	d11a      	bne.n	8003406 <_printf_common+0xd6>
 80033d0:	2000      	movs	r0, #0
 80033d2:	e008      	b.n	80033e6 <_printf_common+0xb6>
 80033d4:	2301      	movs	r3, #1
 80033d6:	4652      	mov	r2, sl
 80033d8:	4639      	mov	r1, r7
 80033da:	4630      	mov	r0, r6
 80033dc:	47c0      	blx	r8
 80033de:	3001      	adds	r0, #1
 80033e0:	d103      	bne.n	80033ea <_printf_common+0xba>
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295
 80033e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ea:	3501      	adds	r5, #1
 80033ec:	e7c3      	b.n	8003376 <_printf_common+0x46>
 80033ee:	18e1      	adds	r1, r4, r3
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	2030      	movs	r0, #48	; 0x30
 80033f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033f8:	4422      	add	r2, r4
 80033fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003402:	3302      	adds	r3, #2
 8003404:	e7c5      	b.n	8003392 <_printf_common+0x62>
 8003406:	2301      	movs	r3, #1
 8003408:	4622      	mov	r2, r4
 800340a:	4639      	mov	r1, r7
 800340c:	4630      	mov	r0, r6
 800340e:	47c0      	blx	r8
 8003410:	3001      	adds	r0, #1
 8003412:	d0e6      	beq.n	80033e2 <_printf_common+0xb2>
 8003414:	f109 0901 	add.w	r9, r9, #1
 8003418:	e7d8      	b.n	80033cc <_printf_common+0x9c>
	...

0800341c <_printf_i>:
 800341c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003420:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003424:	460c      	mov	r4, r1
 8003426:	7e09      	ldrb	r1, [r1, #24]
 8003428:	b085      	sub	sp, #20
 800342a:	296e      	cmp	r1, #110	; 0x6e
 800342c:	4617      	mov	r7, r2
 800342e:	4606      	mov	r6, r0
 8003430:	4698      	mov	r8, r3
 8003432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003434:	f000 80b3 	beq.w	800359e <_printf_i+0x182>
 8003438:	d822      	bhi.n	8003480 <_printf_i+0x64>
 800343a:	2963      	cmp	r1, #99	; 0x63
 800343c:	d036      	beq.n	80034ac <_printf_i+0x90>
 800343e:	d80a      	bhi.n	8003456 <_printf_i+0x3a>
 8003440:	2900      	cmp	r1, #0
 8003442:	f000 80b9 	beq.w	80035b8 <_printf_i+0x19c>
 8003446:	2958      	cmp	r1, #88	; 0x58
 8003448:	f000 8083 	beq.w	8003552 <_printf_i+0x136>
 800344c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003450:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003454:	e032      	b.n	80034bc <_printf_i+0xa0>
 8003456:	2964      	cmp	r1, #100	; 0x64
 8003458:	d001      	beq.n	800345e <_printf_i+0x42>
 800345a:	2969      	cmp	r1, #105	; 0x69
 800345c:	d1f6      	bne.n	800344c <_printf_i+0x30>
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	6813      	ldr	r3, [r2, #0]
 8003462:	0605      	lsls	r5, r0, #24
 8003464:	f103 0104 	add.w	r1, r3, #4
 8003468:	d52a      	bpl.n	80034c0 <_printf_i+0xa4>
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	da03      	bge.n	800347a <_printf_i+0x5e>
 8003472:	222d      	movs	r2, #45	; 0x2d
 8003474:	425b      	negs	r3, r3
 8003476:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800347a:	486f      	ldr	r0, [pc, #444]	; (8003638 <_printf_i+0x21c>)
 800347c:	220a      	movs	r2, #10
 800347e:	e039      	b.n	80034f4 <_printf_i+0xd8>
 8003480:	2973      	cmp	r1, #115	; 0x73
 8003482:	f000 809d 	beq.w	80035c0 <_printf_i+0x1a4>
 8003486:	d808      	bhi.n	800349a <_printf_i+0x7e>
 8003488:	296f      	cmp	r1, #111	; 0x6f
 800348a:	d020      	beq.n	80034ce <_printf_i+0xb2>
 800348c:	2970      	cmp	r1, #112	; 0x70
 800348e:	d1dd      	bne.n	800344c <_printf_i+0x30>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	f043 0320 	orr.w	r3, r3, #32
 8003496:	6023      	str	r3, [r4, #0]
 8003498:	e003      	b.n	80034a2 <_printf_i+0x86>
 800349a:	2975      	cmp	r1, #117	; 0x75
 800349c:	d017      	beq.n	80034ce <_printf_i+0xb2>
 800349e:	2978      	cmp	r1, #120	; 0x78
 80034a0:	d1d4      	bne.n	800344c <_printf_i+0x30>
 80034a2:	2378      	movs	r3, #120	; 0x78
 80034a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034a8:	4864      	ldr	r0, [pc, #400]	; (800363c <_printf_i+0x220>)
 80034aa:	e055      	b.n	8003558 <_printf_i+0x13c>
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	1d19      	adds	r1, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6011      	str	r1, [r2, #0]
 80034b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034bc:	2301      	movs	r3, #1
 80034be:	e08c      	b.n	80035da <_printf_i+0x1be>
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6011      	str	r1, [r2, #0]
 80034c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034c8:	bf18      	it	ne
 80034ca:	b21b      	sxthne	r3, r3
 80034cc:	e7cf      	b.n	800346e <_printf_i+0x52>
 80034ce:	6813      	ldr	r3, [r2, #0]
 80034d0:	6825      	ldr	r5, [r4, #0]
 80034d2:	1d18      	adds	r0, r3, #4
 80034d4:	6010      	str	r0, [r2, #0]
 80034d6:	0628      	lsls	r0, r5, #24
 80034d8:	d501      	bpl.n	80034de <_printf_i+0xc2>
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e002      	b.n	80034e4 <_printf_i+0xc8>
 80034de:	0668      	lsls	r0, r5, #25
 80034e0:	d5fb      	bpl.n	80034da <_printf_i+0xbe>
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	4854      	ldr	r0, [pc, #336]	; (8003638 <_printf_i+0x21c>)
 80034e6:	296f      	cmp	r1, #111	; 0x6f
 80034e8:	bf14      	ite	ne
 80034ea:	220a      	movne	r2, #10
 80034ec:	2208      	moveq	r2, #8
 80034ee:	2100      	movs	r1, #0
 80034f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034f4:	6865      	ldr	r5, [r4, #4]
 80034f6:	60a5      	str	r5, [r4, #8]
 80034f8:	2d00      	cmp	r5, #0
 80034fa:	f2c0 8095 	blt.w	8003628 <_printf_i+0x20c>
 80034fe:	6821      	ldr	r1, [r4, #0]
 8003500:	f021 0104 	bic.w	r1, r1, #4
 8003504:	6021      	str	r1, [r4, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d13d      	bne.n	8003586 <_printf_i+0x16a>
 800350a:	2d00      	cmp	r5, #0
 800350c:	f040 808e 	bne.w	800362c <_printf_i+0x210>
 8003510:	4665      	mov	r5, ip
 8003512:	2a08      	cmp	r2, #8
 8003514:	d10b      	bne.n	800352e <_printf_i+0x112>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	07db      	lsls	r3, r3, #31
 800351a:	d508      	bpl.n	800352e <_printf_i+0x112>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	bfde      	ittt	le
 8003524:	2330      	movle	r3, #48	; 0x30
 8003526:	f805 3c01 	strble.w	r3, [r5, #-1]
 800352a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800352e:	ebac 0305 	sub.w	r3, ip, r5
 8003532:	6123      	str	r3, [r4, #16]
 8003534:	f8cd 8000 	str.w	r8, [sp]
 8003538:	463b      	mov	r3, r7
 800353a:	aa03      	add	r2, sp, #12
 800353c:	4621      	mov	r1, r4
 800353e:	4630      	mov	r0, r6
 8003540:	f7ff fef6 	bl	8003330 <_printf_common>
 8003544:	3001      	adds	r0, #1
 8003546:	d14d      	bne.n	80035e4 <_printf_i+0x1c8>
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	b005      	add	sp, #20
 800354e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003552:	4839      	ldr	r0, [pc, #228]	; (8003638 <_printf_i+0x21c>)
 8003554:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	6821      	ldr	r1, [r4, #0]
 800355c:	1d1d      	adds	r5, r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6015      	str	r5, [r2, #0]
 8003562:	060a      	lsls	r2, r1, #24
 8003564:	d50b      	bpl.n	800357e <_printf_i+0x162>
 8003566:	07ca      	lsls	r2, r1, #31
 8003568:	bf44      	itt	mi
 800356a:	f041 0120 	orrmi.w	r1, r1, #32
 800356e:	6021      	strmi	r1, [r4, #0]
 8003570:	b91b      	cbnz	r3, 800357a <_printf_i+0x15e>
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	f022 0220 	bic.w	r2, r2, #32
 8003578:	6022      	str	r2, [r4, #0]
 800357a:	2210      	movs	r2, #16
 800357c:	e7b7      	b.n	80034ee <_printf_i+0xd2>
 800357e:	064d      	lsls	r5, r1, #25
 8003580:	bf48      	it	mi
 8003582:	b29b      	uxthmi	r3, r3
 8003584:	e7ef      	b.n	8003566 <_printf_i+0x14a>
 8003586:	4665      	mov	r5, ip
 8003588:	fbb3 f1f2 	udiv	r1, r3, r2
 800358c:	fb02 3311 	mls	r3, r2, r1, r3
 8003590:	5cc3      	ldrb	r3, [r0, r3]
 8003592:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003596:	460b      	mov	r3, r1
 8003598:	2900      	cmp	r1, #0
 800359a:	d1f5      	bne.n	8003588 <_printf_i+0x16c>
 800359c:	e7b9      	b.n	8003512 <_printf_i+0xf6>
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	6825      	ldr	r5, [r4, #0]
 80035a2:	6961      	ldr	r1, [r4, #20]
 80035a4:	1d18      	adds	r0, r3, #4
 80035a6:	6010      	str	r0, [r2, #0]
 80035a8:	0628      	lsls	r0, r5, #24
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	d501      	bpl.n	80035b2 <_printf_i+0x196>
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	e002      	b.n	80035b8 <_printf_i+0x19c>
 80035b2:	066a      	lsls	r2, r5, #25
 80035b4:	d5fb      	bpl.n	80035ae <_printf_i+0x192>
 80035b6:	8019      	strh	r1, [r3, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	6123      	str	r3, [r4, #16]
 80035bc:	4665      	mov	r5, ip
 80035be:	e7b9      	b.n	8003534 <_printf_i+0x118>
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	1d19      	adds	r1, r3, #4
 80035c4:	6011      	str	r1, [r2, #0]
 80035c6:	681d      	ldr	r5, [r3, #0]
 80035c8:	6862      	ldr	r2, [r4, #4]
 80035ca:	2100      	movs	r1, #0
 80035cc:	4628      	mov	r0, r5
 80035ce:	f7fc fe27 	bl	8000220 <memchr>
 80035d2:	b108      	cbz	r0, 80035d8 <_printf_i+0x1bc>
 80035d4:	1b40      	subs	r0, r0, r5
 80035d6:	6060      	str	r0, [r4, #4]
 80035d8:	6863      	ldr	r3, [r4, #4]
 80035da:	6123      	str	r3, [r4, #16]
 80035dc:	2300      	movs	r3, #0
 80035de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e2:	e7a7      	b.n	8003534 <_printf_i+0x118>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	462a      	mov	r2, r5
 80035e8:	4639      	mov	r1, r7
 80035ea:	4630      	mov	r0, r6
 80035ec:	47c0      	blx	r8
 80035ee:	3001      	adds	r0, #1
 80035f0:	d0aa      	beq.n	8003548 <_printf_i+0x12c>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	079b      	lsls	r3, r3, #30
 80035f6:	d413      	bmi.n	8003620 <_printf_i+0x204>
 80035f8:	68e0      	ldr	r0, [r4, #12]
 80035fa:	9b03      	ldr	r3, [sp, #12]
 80035fc:	4298      	cmp	r0, r3
 80035fe:	bfb8      	it	lt
 8003600:	4618      	movlt	r0, r3
 8003602:	e7a3      	b.n	800354c <_printf_i+0x130>
 8003604:	2301      	movs	r3, #1
 8003606:	464a      	mov	r2, r9
 8003608:	4639      	mov	r1, r7
 800360a:	4630      	mov	r0, r6
 800360c:	47c0      	blx	r8
 800360e:	3001      	adds	r0, #1
 8003610:	d09a      	beq.n	8003548 <_printf_i+0x12c>
 8003612:	3501      	adds	r5, #1
 8003614:	68e3      	ldr	r3, [r4, #12]
 8003616:	9a03      	ldr	r2, [sp, #12]
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	42ab      	cmp	r3, r5
 800361c:	dcf2      	bgt.n	8003604 <_printf_i+0x1e8>
 800361e:	e7eb      	b.n	80035f8 <_printf_i+0x1dc>
 8003620:	2500      	movs	r5, #0
 8003622:	f104 0919 	add.w	r9, r4, #25
 8003626:	e7f5      	b.n	8003614 <_printf_i+0x1f8>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ac      	bne.n	8003586 <_printf_i+0x16a>
 800362c:	7803      	ldrb	r3, [r0, #0]
 800362e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003632:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003636:	e76c      	b.n	8003512 <_printf_i+0xf6>
 8003638:	080039d5 	.word	0x080039d5
 800363c:	080039e6 	.word	0x080039e6

08003640 <_sbrk_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4c06      	ldr	r4, [pc, #24]	; (800365c <_sbrk_r+0x1c>)
 8003644:	2300      	movs	r3, #0
 8003646:	4605      	mov	r5, r0
 8003648:	4608      	mov	r0, r1
 800364a:	6023      	str	r3, [r4, #0]
 800364c:	f000 f930 	bl	80038b0 <_sbrk>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d102      	bne.n	800365a <_sbrk_r+0x1a>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	b103      	cbz	r3, 800365a <_sbrk_r+0x1a>
 8003658:	602b      	str	r3, [r5, #0]
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	20000468 	.word	0x20000468

08003660 <__sread>:
 8003660:	b510      	push	{r4, lr}
 8003662:	460c      	mov	r4, r1
 8003664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003668:	f000 f8e0 	bl	800382c <_read_r>
 800366c:	2800      	cmp	r0, #0
 800366e:	bfab      	itete	ge
 8003670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003672:	89a3      	ldrhlt	r3, [r4, #12]
 8003674:	181b      	addge	r3, r3, r0
 8003676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800367a:	bfac      	ite	ge
 800367c:	6563      	strge	r3, [r4, #84]	; 0x54
 800367e:	81a3      	strhlt	r3, [r4, #12]
 8003680:	bd10      	pop	{r4, pc}

08003682 <__swrite>:
 8003682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003686:	461f      	mov	r7, r3
 8003688:	898b      	ldrh	r3, [r1, #12]
 800368a:	05db      	lsls	r3, r3, #23
 800368c:	4605      	mov	r5, r0
 800368e:	460c      	mov	r4, r1
 8003690:	4616      	mov	r6, r2
 8003692:	d505      	bpl.n	80036a0 <__swrite+0x1e>
 8003694:	2302      	movs	r3, #2
 8003696:	2200      	movs	r2, #0
 8003698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369c:	f000 f868 	bl	8003770 <_lseek_r>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	4632      	mov	r2, r6
 80036ae:	463b      	mov	r3, r7
 80036b0:	4628      	mov	r0, r5
 80036b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b6:	f000 b817 	b.w	80036e8 <_write_r>

080036ba <__sseek>:
 80036ba:	b510      	push	{r4, lr}
 80036bc:	460c      	mov	r4, r1
 80036be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c2:	f000 f855 	bl	8003770 <_lseek_r>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	bf15      	itete	ne
 80036cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036d6:	81a3      	strheq	r3, [r4, #12]
 80036d8:	bf18      	it	ne
 80036da:	81a3      	strhne	r3, [r4, #12]
 80036dc:	bd10      	pop	{r4, pc}

080036de <__sclose>:
 80036de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e2:	f000 b813 	b.w	800370c <_close_r>
	...

080036e8 <_write_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4c07      	ldr	r4, [pc, #28]	; (8003708 <_write_r+0x20>)
 80036ec:	4605      	mov	r5, r0
 80036ee:	4608      	mov	r0, r1
 80036f0:	4611      	mov	r1, r2
 80036f2:	2200      	movs	r2, #0
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f000 f8e8 	bl	80038cc <_write>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_write_r+0x1e>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	b103      	cbz	r3, 8003706 <_write_r+0x1e>
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	20000468 	.word	0x20000468

0800370c <_close_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4c06      	ldr	r4, [pc, #24]	; (8003728 <_close_r+0x1c>)
 8003710:	2300      	movs	r3, #0
 8003712:	4605      	mov	r5, r0
 8003714:	4608      	mov	r0, r1
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	f000 f8a2 	bl	8003860 <_close>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_close_r+0x1a>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	b103      	cbz	r3, 8003726 <_close_r+0x1a>
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	20000468 	.word	0x20000468

0800372c <_fstat_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4c07      	ldr	r4, [pc, #28]	; (800374c <_fstat_r+0x20>)
 8003730:	2300      	movs	r3, #0
 8003732:	4605      	mov	r5, r0
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	f000 f899 	bl	8003870 <_fstat>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d102      	bne.n	8003748 <_fstat_r+0x1c>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	b103      	cbz	r3, 8003748 <_fstat_r+0x1c>
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	bd38      	pop	{r3, r4, r5, pc}
 800374a:	bf00      	nop
 800374c:	20000468 	.word	0x20000468

08003750 <_isatty_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4c06      	ldr	r4, [pc, #24]	; (800376c <_isatty_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4605      	mov	r5, r0
 8003758:	4608      	mov	r0, r1
 800375a:	6023      	str	r3, [r4, #0]
 800375c:	f000 f890 	bl	8003880 <_isatty>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_isatty_r+0x1a>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	b103      	cbz	r3, 800376a <_isatty_r+0x1a>
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	20000468 	.word	0x20000468

08003770 <_lseek_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4c07      	ldr	r4, [pc, #28]	; (8003790 <_lseek_r+0x20>)
 8003774:	4605      	mov	r5, r0
 8003776:	4608      	mov	r0, r1
 8003778:	4611      	mov	r1, r2
 800377a:	2200      	movs	r2, #0
 800377c:	6022      	str	r2, [r4, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f000 f886 	bl	8003890 <_lseek>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_lseek_r+0x1e>
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	b103      	cbz	r3, 800378e <_lseek_r+0x1e>
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	20000468 	.word	0x20000468

08003794 <memcpy>:
 8003794:	b510      	push	{r4, lr}
 8003796:	1e43      	subs	r3, r0, #1
 8003798:	440a      	add	r2, r1
 800379a:	4291      	cmp	r1, r2
 800379c:	d100      	bne.n	80037a0 <memcpy+0xc>
 800379e:	bd10      	pop	{r4, pc}
 80037a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037a8:	e7f7      	b.n	800379a <memcpy+0x6>

080037aa <memmove>:
 80037aa:	4288      	cmp	r0, r1
 80037ac:	b510      	push	{r4, lr}
 80037ae:	eb01 0302 	add.w	r3, r1, r2
 80037b2:	d807      	bhi.n	80037c4 <memmove+0x1a>
 80037b4:	1e42      	subs	r2, r0, #1
 80037b6:	4299      	cmp	r1, r3
 80037b8:	d00a      	beq.n	80037d0 <memmove+0x26>
 80037ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037c2:	e7f8      	b.n	80037b6 <memmove+0xc>
 80037c4:	4283      	cmp	r3, r0
 80037c6:	d9f5      	bls.n	80037b4 <memmove+0xa>
 80037c8:	1881      	adds	r1, r0, r2
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	42d3      	cmn	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memmove+0x28>
 80037d0:	bd10      	pop	{r4, pc}
 80037d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037da:	e7f7      	b.n	80037cc <memmove+0x22>

080037dc <__malloc_lock>:
 80037dc:	4770      	bx	lr

080037de <__malloc_unlock>:
 80037de:	4770      	bx	lr

080037e0 <_realloc_r>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	4607      	mov	r7, r0
 80037e4:	4614      	mov	r4, r2
 80037e6:	460e      	mov	r6, r1
 80037e8:	b921      	cbnz	r1, 80037f4 <_realloc_r+0x14>
 80037ea:	4611      	mov	r1, r2
 80037ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037f0:	f7ff bab2 	b.w	8002d58 <_malloc_r>
 80037f4:	b922      	cbnz	r2, 8003800 <_realloc_r+0x20>
 80037f6:	f7ff fa61 	bl	8002cbc <_free_r>
 80037fa:	4625      	mov	r5, r4
 80037fc:	4628      	mov	r0, r5
 80037fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003800:	f000 f826 	bl	8003850 <_malloc_usable_size_r>
 8003804:	42a0      	cmp	r0, r4
 8003806:	d20f      	bcs.n	8003828 <_realloc_r+0x48>
 8003808:	4621      	mov	r1, r4
 800380a:	4638      	mov	r0, r7
 800380c:	f7ff faa4 	bl	8002d58 <_malloc_r>
 8003810:	4605      	mov	r5, r0
 8003812:	2800      	cmp	r0, #0
 8003814:	d0f2      	beq.n	80037fc <_realloc_r+0x1c>
 8003816:	4631      	mov	r1, r6
 8003818:	4622      	mov	r2, r4
 800381a:	f7ff ffbb 	bl	8003794 <memcpy>
 800381e:	4631      	mov	r1, r6
 8003820:	4638      	mov	r0, r7
 8003822:	f7ff fa4b 	bl	8002cbc <_free_r>
 8003826:	e7e9      	b.n	80037fc <_realloc_r+0x1c>
 8003828:	4635      	mov	r5, r6
 800382a:	e7e7      	b.n	80037fc <_realloc_r+0x1c>

0800382c <_read_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4c07      	ldr	r4, [pc, #28]	; (800384c <_read_r+0x20>)
 8003830:	4605      	mov	r5, r0
 8003832:	4608      	mov	r0, r1
 8003834:	4611      	mov	r1, r2
 8003836:	2200      	movs	r2, #0
 8003838:	6022      	str	r2, [r4, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f000 f830 	bl	80038a0 <_read>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_read_r+0x1e>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	b103      	cbz	r3, 800384a <_read_r+0x1e>
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	20000468 	.word	0x20000468

08003850 <_malloc_usable_size_r>:
 8003850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003854:	1f18      	subs	r0, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	bfbc      	itt	lt
 800385a:	580b      	ldrlt	r3, [r1, r0]
 800385c:	18c0      	addlt	r0, r0, r3
 800385e:	4770      	bx	lr

08003860 <_close>:
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <_close+0xc>)
 8003862:	2258      	movs	r2, #88	; 0x58
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	4770      	bx	lr
 800386c:	20000468 	.word	0x20000468

08003870 <_fstat>:
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <_fstat+0xc>)
 8003872:	2258      	movs	r2, #88	; 0x58
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	4770      	bx	lr
 800387c:	20000468 	.word	0x20000468

08003880 <_isatty>:
 8003880:	4b02      	ldr	r3, [pc, #8]	; (800388c <_isatty+0xc>)
 8003882:	2258      	movs	r2, #88	; 0x58
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	2000      	movs	r0, #0
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000468 	.word	0x20000468

08003890 <_lseek>:
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <_lseek+0xc>)
 8003892:	2258      	movs	r2, #88	; 0x58
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	f04f 30ff 	mov.w	r0, #4294967295
 800389a:	4770      	bx	lr
 800389c:	20000468 	.word	0x20000468

080038a0 <_read>:
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <_read+0xc>)
 80038a2:	2258      	movs	r2, #88	; 0x58
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f04f 30ff 	mov.w	r0, #4294967295
 80038aa:	4770      	bx	lr
 80038ac:	20000468 	.word	0x20000468

080038b0 <_sbrk>:
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <_sbrk+0x14>)
 80038b2:	6819      	ldr	r1, [r3, #0]
 80038b4:	4602      	mov	r2, r0
 80038b6:	b909      	cbnz	r1, 80038bc <_sbrk+0xc>
 80038b8:	4903      	ldr	r1, [pc, #12]	; (80038c8 <_sbrk+0x18>)
 80038ba:	6019      	str	r1, [r3, #0]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	4402      	add	r2, r0
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	4770      	bx	lr
 80038c4:	2000010c 	.word	0x2000010c
 80038c8:	20000444 	.word	0x20000444

080038cc <_write>:
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <_write+0xc>)
 80038ce:	2258      	movs	r2, #88	; 0x58
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f04f 30ff 	mov.w	r0, #4294967295
 80038d6:	4770      	bx	lr
 80038d8:	20000468 	.word	0x20000468

080038dc <_init>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr

080038e8 <_fini>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr
